export = ORMap;
/**
 * @classdesc An Observed-Removed Map Replicated Data type.
 *
 * Observed-Removed-Map's are a mapping of keys (which can be any {@link module:akkaserverless.Serializable}) to
 * Replicated Data types. Values of the map are merged together. Elements can be added and removed, however, when an
 * element is removed and then added again, it's possible that the old value will be merged with the new, depending on
 * whether the remove was replicated to all nodes before the add was.
 *
 * Note that while the map may contain different types of Replicated Data for different keys, a given key may not change
 * its type, and doing so will likely result in the Replicated Data entering a non mergable state, from which it can't
 * recover.
 *
 * @constructor module:akkaserverless.replicatedentity.ORMap
 * @implements module:akkaserverless.replicatedentity.ReplicatedData
 */
declare function ORMap(): void;
declare class ORMap {
    /**
     * Generator for default values.
     *
     * This is invoked by get when the current map has no Replicated Data defined for the key.
     *
     * If this returns a Replicated Data object, it will be added to the map.
     *
     * Care should be taken when using this, since it means that the get method can trigger elements to be created. If
     * using default values, the get method should not be used in queries where an empty value for the Replicated Data
     * means the value is not present.
     *
     * @name module:akkaserverless.replicatedentity.ORMap#defaultValue
     * @type {module:akkaserverless.replicatedentity.ORMap~defaultValueCallback}
     */
    defaultValue: any;
    /**
     * Check whether this map contains a value of the given key.
     *
     * @function module:akkaserverless.replicatedentity.ORMap#has
     * @param {module:akkaserverless.Serializable} key The key to check.
     * @returns {boolean} True if this map contains a value of the given key.
     */
    has: (key: any) => boolean;
    /**
     * Execute the given callback for each element.
     *
     * @function module:akkaserverless.replicatedentity.ORMap#forEach
     * @param {module:akkaserverless.replicatedentity.ORMap~forEachCallback} callback The callback to handle each element.
     */
    forEach: (callback: any) => void;
    /**
     * Return an iterator of the entries of this map.
     *
     * @function module:akkaserverless.replicatedentity.ORMap#entries
     * @returns {Iterator<Array>}
     */
    entries: () => Iterator<any[]>;
    /**
     * Return an iterator of the values of this map.
     *
     * @function module:akkaserverless.replicatedentity.ORMap#values
     * @returns {Iterator<module:akkaserverless.replicatedentity.ReplicatedData>}
     */
    values: () => Iterator<{
        exports: typeof ORMap;
    }>;
    /**
     * Return an iterator of the keys of this map.
     *
     * @function module:akkaserverless.replicatedentity.ORMap#keys
     * @returns {Iterator<module:akkaserverless.Serializable>}
     */
    keys: () => Iterator<{
        exports: typeof ORMap;
    }>;
    /**
     * Get the value at the given key.
     *
     * @function module:akkaserverless.replicatedentity.ORMap#get
     * @param {module:akkaserverless.Serializable} key The key to get.
     * @returns {undefined|module:akkaserverless.replicatedentity.ReplicatedData} The Replicated Data value, or undefined if no value is defined at that key.
     */
    get: (key: any) => undefined | {
        exports: typeof ORMap;
    };
    /**
     * Set the given value for the given key.
     *
     * @function module:akkaserverless.replicatedentity.ORMap#set
     * @param {module:akkaserverless.Serializable} key The key to set.
     * @param {module:akkaserverless.replicatedentity.ReplicatedData} value The value to set.
     * @return {module:akkaserverless.replicatedentity.ORMap} This map.
     */
    set: (key: any, value: any) => any;
    /**
     * Delete the value at the given key.
     *
     * @function module:akkaserverless.replicatedentity.ORMap#delete
     * @param {module:akkaserverless.Serializable} key The key to delete.
     * @return {module:akkaserverless.replicatedentity.ORMap} This map.
     */
    delete: (key: any) => any;
    /**
     * Clear all entries from this map.
     *
     * @function module:akkaserverless.replicatedentity.ORMap#clear
     * @return {module:akkaserverless.replicatedentity.ORMap} This map.
     */
    clear: () => any;
    getAndResetDelta: (initial: any) => {
        ormap: {
            cleared: boolean;
            removed: any[];
            added: any[];
            updated: any[];
        };
    } | null;
    applyDelta: (delta: any, anySupport: any, createForDelta: any) => void;
    toString: () => string;
    /**
     * Return an iterator of the entries of this map.
     *
     * @function module:akkaserverless.replicatedentity.ORMap#iterator
     * @returns {Iterator<Array>}
     */
    [Symbol.iterator]: () => Iterator<any[]>;
}
