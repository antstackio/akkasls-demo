"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartedNeo4jContainer = exports.Neo4jContainer = void 0;
const __1 = require("../..");
const uuid_1 = require("../../uuid");
const abstract_started_container_1 = require("../abstract-started-container");
class Neo4jContainer extends __1.GenericContainer {
    constructor(image = "neo4j:latest", password = new uuid_1.RandomUuid().nextUuid()) {
        super(image);
        this.password = password;
        this.defaultBoltPort = 7687;
        this.defaultHttpPort = 7474;
        this.defaultUsername = "neo4j";
        this.withExposedPorts(this.defaultBoltPort, this.defaultHttpPort).withWaitStrategy(__1.Wait.forLogMessage("Started."));
    }
    withPassword(password) {
        this.password = password;
        return this;
    }
    withApoc() {
        return this.withEnv("NEO4JLABS_PLUGINS", '["apoc"]').withEnv("NEO4J_dbms_security_procedures_unrestricted", "apoc.*");
    }
    withTtl(schedule = 5) {
        return this.withEnv("NEO4J_apoc_ttl_enabled", "true").withEnv("NEO4J_apoc_ttl_schedule", schedule.toString());
    }
    preCreate() {
        return __awaiter(this, void 0, void 0, function* () {
            this.withEnv("NEO4J_AUTH", `${this.defaultUsername}/${this.password}`);
        });
    }
    start() {
        const _super = Object.create(null, {
            start: { get: () => super.start }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return new StartedNeo4jContainer(yield _super.start.call(this), this.defaultBoltPort, this.defaultHttpPort, this.defaultUsername, this.password);
        });
    }
}
exports.Neo4jContainer = Neo4jContainer;
class StartedNeo4jContainer extends abstract_started_container_1.AbstractStartedContainer {
    constructor(startedTestContainer, boltPort, httpPort, username, password) {
        super(startedTestContainer);
        this.username = username;
        this.password = password;
        this.host = this.startedTestContainer.getHost();
        this.boltPort = this.startedTestContainer.getMappedPort(boltPort);
        this.httpPort = this.startedTestContainer.getMappedPort(httpPort);
    }
    getBoltUri() {
        return `bolt://${this.host}:${this.boltPort}/`;
    }
    getHttpUri() {
        return `http://${this.host}:${this.httpPort}/`;
    }
    getPassword() {
        return this.password;
    }
    getUsername() {
        return this.username;
    }
}
exports.StartedNeo4jContainer = StartedNeo4jContainer;
