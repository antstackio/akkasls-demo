export = AkkaServerless;
/**
 * An Akka Serverless server.
 *
 * @interface module:akkaserverless.Server
 */
/**
 * Start the server.
 *
 * @function module:akkaserverless.Server#start
 * @param {module:akkaserverless.Server~startOptions=} options The options for starting the server.
 * @returns {number} The port number that the server bound to.
 */
/**
 * Shutdown the server
 *
 * @function module:akkaserverless.Server#shutdown
 */
/**
 * Options for starting a server.
 *
 * @typedef module:akkaserverless.Server~startOptions
 * @property {string} [bindAddress="0.0.0.0"] The address to bind to.
 * @property {number} [bindPort=8080] The port to bind to, specify zero for a random ephemeral port.
 */
/**
 * @typedef module:akkaserverless.AkkaServerless~options
 * @property {string} serviceName - [serviceName=<name from package.json>] The name of this service.
 * @property {string} serviceVersion - [serviceVersion=<version from package.json>] The version of this service.
 * @property {string} descriptorSetPath - [descriptorSetPath="user-function.desc"] A path to a compiled Protobuf FileDescriptor set,
 * as output by protoc --descriptor_set_out=somefile.desc. This file must contain all of the component services that
 * this user function serves.
 */
/**
 * An Akka Serverless entity.
 *
 * @interface module:akkaserverless.Entity
 * @extends module:akkaserverless.Server
 */
/**
 * An Akka Serverless root server.
 *
 * @memberOf module:akkaserverless
 * @implements module:akkaserverless.Server
 */
declare class AkkaServerless implements module {
    /**
     * Create a new akkaserverless server.
     *
     * @param {module:akkaserverless.AkkaServerless~options=} options The options for this server.
     */
    constructor(options: any);
    options: any;
    proto: Buffer;
    components: any[];
    proxySeen: boolean;
    proxyHasTerminated: boolean;
    waitingForProxyTermination: boolean;
    devMode: boolean;
    /**
     * Add an component to this server.
     *
     * @param {module:akkaserverless.Component} components The components to add.
     * @returns {module:akkaserverless.AkkaServerless} This server.
     */
    addComponent(...components: any): any;
    /**
     * Start this server.
     *
     * @param {module:akkaserverless.Server~startOptions=} options The options for starting.
     * @returns {number} The port that was bound to, useful for when a random ephemeral port was requested.
     */
    start(options: any): number;
    server: grpc.Server | undefined;
    isVersionProbe(info: any): boolean;
    discoveryLogic(proxyInfo: any): discovery_messages.Spec;
    discover(call: any, callback: any): void;
    docLinkFor(code: any): string;
    reportErrorLogic(userError: any): string;
    reportError(call: any, callback: any): void;
    proxyTerminated(): void;
    formatSource(location: any): string;
    shutdown(): void;
    terminate(): void;
}
declare namespace AkkaServerless {
    export { module };
}
declare namespace module {
    namespace exports {
        export { module };
    }
}
import grpc = require("@grpc/grpc-js");
import discovery_messages = require("../proto/akkaserverless/protocol/discovery_pb");
/**
 * :akkaserverless.Server~startOptions
 */
type module = {
    /**
     * The address to bind to.
     */
    bindAddress?: string | undefined;
    /**
     * The port to bind to, specify zero for a random ephemeral port.
     */
    bindPort?: number | undefined;
};
