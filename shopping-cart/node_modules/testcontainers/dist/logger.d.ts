declare type Message = string;
export interface Logger {
    trace(message: Message): void;
    debug(message: Message): void;
    info(message: Message): void;
    warn(message: Message): void;
    error(message: Message): void;
}
declare class DebugLogger implements Logger {
    private readonly logger;
    constructor(namespace: string);
    trace(message: Message): void;
    debug(message: Message): void;
    info(message: Message): void;
    warn(message: Message): void;
    error(message: Message): void;
}
export declare class FakeLogger implements Logger {
    readonly traceLogs: Message[];
    readonly debugLogs: Message[];
    readonly infoLogs: Message[];
    readonly warnLogs: Message[];
    readonly errorLogs: Message[];
    trace(message: Message): void;
    debug(message: Message): void;
    info(message: Message): void;
    warn(message: Message): void;
    error(message: Message): void;
}
export declare const log: DebugLogger;
export declare const containerLog: DebugLogger;
export {};
