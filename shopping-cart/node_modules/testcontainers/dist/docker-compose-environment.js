"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DownedDockerComposeEnvironment = exports.StoppedDockerComposeEnvironment = exports.StartedDockerComposeEnvironment = exports.DockerComposeEnvironment = void 0;
const dockerCompose = __importStar(require("docker-compose"));
const bound_ports_1 = require("./bound-ports");
const container_state_1 = require("./container-state");
const docker_client_instance_1 = require("./docker-client-instance");
const docker_compose_container_name_resolver_1 = require("./docker-compose-container-name-resolver");
const generic_container_1 = require("./generic-container");
const logger_1 = require("./logger");
const port_check_1 = require("./port-check");
const wait_strategy_1 = require("./wait-strategy");
const reaper_1 = require("./reaper");
const uuid_1 = require("./uuid");
class DockerComposeEnvironment {
    constructor(composeFilePath, composeFiles, uuid = new uuid_1.RandomUuid()) {
        this.composeFilePath = composeFilePath;
        this.composeFiles = composeFiles;
        this.build = false;
        this.env = {};
        this.waitStrategy = {};
        this.startupTimeout = 60000;
        this.projectName = `testcontainers-${uuid.nextUuid()}`;
    }
    withBuild() {
        this.build = true;
        return this;
    }
    withEnv(key, value) {
        this.env[key] = value;
        return this;
    }
    withWaitStrategy(containerName, waitStrategy) {
        this.waitStrategy[containerName] = waitStrategy;
        return this;
    }
    withStartupTimeout(startupTimeout) {
        this.startupTimeout = startupTimeout;
        return this;
    }
    up() {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.log.info(`Starting DockerCompose environment ${this.projectName}`);
            const dockerClient = yield docker_client_instance_1.DockerClientInstance.getInstance();
            (yield reaper_1.ReaperInstance.getInstance(dockerClient)).addProject(this.projectName);
            yield this.upAll();
            const startedContainers = (yield dockerClient.listContainers()).filter((container) => container.Labels["com.docker.compose.project"] === this.projectName);
            const startedContainerNames = startedContainers.reduce((containerNames, startedContainer) => [
                ...containerNames,
                startedContainer.Names.join(", "),
            ], []);
            logger_1.log.info(`Started the following containers: ${startedContainerNames.join(", ")}`);
            const startedGenericContainers = (yield Promise.all(startedContainers.map((startedContainer) => __awaiter(this, void 0, void 0, function* () {
                const container = yield dockerClient.getContainer(startedContainer.Id);
                const containerName = docker_compose_container_name_resolver_1.resolveDockerComposeContainerName(this.projectName, startedContainer.Names[0]);
                (yield container.logs())
                    .on("data", (data) => logger_1.containerLog.trace(`${containerName}: ${data}`))
                    .on("err", (data) => logger_1.containerLog.error(`${containerName}: ${data}`));
                const inspectResult = yield container.inspect();
                const boundPorts = this.getBoundPorts(startedContainer);
                const containerState = new container_state_1.ContainerState(inspectResult);
                try {
                    logger_1.log.info(`Waiting for container ${containerName} to be ready`);
                    yield this.waitForContainer(dockerClient, container, containerName, containerState, boundPorts);
                    logger_1.log.info(`Container ${containerName} is ready`);
                }
                catch (err) {
                    logger_1.log.error(`Container ${containerName} failed to be ready: ${err}`);
                    try {
                        yield down(this.composeFilePath, this.composeFiles, this.projectName);
                    }
                    catch (_a) {
                        logger_1.log.warn(`Failed to stop DockerCompose environment after failed up`);
                    }
                    throw err;
                }
                return new generic_container_1.StartedGenericContainer(container, dockerClient.getHost(), inspectResult, boundPorts, containerName, dockerClient);
            })))).reduce((map, startedGenericContainer) => {
                const containerName = startedGenericContainer.getName();
                return Object.assign(Object.assign({}, map), { [containerName]: startedGenericContainer });
            }, {});
            logger_1.log.info(`DockerCompose environment started: ${Object.keys(startedGenericContainers).join(", ")}`);
            return new StartedDockerComposeEnvironment(this.composeFilePath, this.composeFiles, this.projectName, startedGenericContainers);
        });
    }
    upAll() {
        return __awaiter(this, void 0, void 0, function* () {
            const commandOptions = [];
            if (this.build) {
                commandOptions.push("--build");
            }
            const defaultOptions = defaultDockerComposeOptions(this.composeFilePath, this.composeFiles, this.projectName);
            const options = Object.assign(Object.assign({}, defaultOptions), { commandOptions, env: Object.assign(Object.assign({}, defaultOptions.env), this.env) });
            logger_1.log.info(`Upping DockerCompose environment`);
            try {
                yield dockerCompose.upAll(options);
                logger_1.log.info(`Upped DockerCompose environment`);
            }
            catch (err) {
                const errorMessage = err.err ? err.err.trim() : err;
                logger_1.log.error(`Failed to up DockerCompose environment: ${errorMessage}`);
                try {
                    yield down(this.composeFilePath, this.composeFiles, this.projectName);
                }
                catch (_a) {
                    logger_1.log.warn(`Failed to stop DockerCompose environment after failed up`);
                }
                throw new Error(errorMessage);
            }
        });
    }
    getBoundPorts(containerInfo) {
        const boundPorts = new bound_ports_1.BoundPorts();
        containerInfo.Ports.forEach((port) => boundPorts.setBinding(port.PrivatePort, port.PublicPort));
        return boundPorts;
    }
    waitForContainer(dockerClient, container, containerName, containerState, boundPorts) {
        return __awaiter(this, void 0, void 0, function* () {
            const waitStrategy = this.getWaitStrategy(dockerClient, container, containerName);
            yield waitStrategy.withStartupTimeout(this.startupTimeout).waitUntilReady(container, containerState, boundPorts);
        });
    }
    getWaitStrategy(dockerClient, container, containerName) {
        if (this.waitStrategy[containerName]) {
            return this.waitStrategy[containerName];
        }
        else {
            const hostPortCheck = new port_check_1.HostPortCheck(dockerClient.getHost());
            const internalPortCheck = new port_check_1.InternalPortCheck(container, dockerClient);
            return new wait_strategy_1.HostPortWaitStrategy(dockerClient, hostPortCheck, internalPortCheck);
        }
    }
}
exports.DockerComposeEnvironment = DockerComposeEnvironment;
class StartedDockerComposeEnvironment {
    constructor(composeFilePath, composeFiles, projectName, startedGenericContainers) {
        this.composeFilePath = composeFilePath;
        this.composeFiles = composeFiles;
        this.projectName = projectName;
        this.startedGenericContainers = startedGenericContainers;
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            yield stop(this.composeFilePath, this.composeFiles, this.projectName);
            return new StoppedDockerComposeEnvironment(this.composeFilePath, this.composeFiles, this.projectName);
        });
    }
    down() {
        return __awaiter(this, void 0, void 0, function* () {
            yield down(this.composeFilePath, this.composeFiles, this.projectName);
            return new DownedDockerComposeEnvironment();
        });
    }
    getContainer(containerName) {
        const container = this.startedGenericContainers[containerName];
        if (!container) {
            const error = `Cannot get container "${containerName}" as it is not running`;
            logger_1.log.error(error);
            throw new Error(error);
        }
        return container;
    }
}
exports.StartedDockerComposeEnvironment = StartedDockerComposeEnvironment;
class StoppedDockerComposeEnvironment {
    constructor(composeFilePath, composeFiles, projectName) {
        this.composeFilePath = composeFilePath;
        this.composeFiles = composeFiles;
        this.projectName = projectName;
    }
    down() {
        return __awaiter(this, void 0, void 0, function* () {
            yield down(this.composeFilePath, this.composeFiles, this.projectName);
            return new DownedDockerComposeEnvironment();
        });
    }
}
exports.StoppedDockerComposeEnvironment = StoppedDockerComposeEnvironment;
class DownedDockerComposeEnvironment {
}
exports.DownedDockerComposeEnvironment = DownedDockerComposeEnvironment;
const defaultDockerComposeOptions = (filePath, files, projectName) => ({
    log: false,
    cwd: filePath,
    config: files,
    env: Object.assign(Object.assign({}, process.env), { COMPOSE_PROJECT_NAME: projectName }),
});
const down = (filePath, files, projectName) => __awaiter(void 0, void 0, void 0, function* () {
    const createOptions = () => (Object.assign(Object.assign({}, defaultDockerComposeOptions(filePath, files, projectName)), { commandOptions: ["-v"] }));
    logger_1.log.info(`Downing DockerCompose environment`);
    try {
        yield dockerCompose.down(createOptions());
        logger_1.log.info(`Downed DockerCompose environment`);
    }
    catch ({ err }) {
        logger_1.log.error(`Failed to down DockerCompose environment: ${err}`);
        throw new Error(err.trim());
    }
});
const stop = (filePath, files, projectName) => __awaiter(void 0, void 0, void 0, function* () {
    logger_1.log.info(`Stopping DockerCompose environment`);
    try {
        yield dockerCompose.stop(defaultDockerComposeOptions(filePath, files, projectName));
        logger_1.log.info(`Stopped DockerCompose environment`);
    }
    catch ({ err }) {
        logger_1.log.error(`Failed to stop DockerCompose environment: ${err}`);
        throw new Error(err.trim());
    }
});
