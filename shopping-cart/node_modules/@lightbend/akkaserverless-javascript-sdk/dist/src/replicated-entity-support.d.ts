/**
 * :akkaserverless.replicatedentity.ReplicatedEntityCommandContext~onStateChangeCallback
 */
export type module = (state: any, context: any) => undefined | object;
export class ReplicatedEntityServices {
    services: {};
    includeDirs: string[];
    addService(entity: any, allComponents: any): void;
    componentType(): string;
    register(server: any): void;
    handle(call: any): void;
}
export class ReplicatedEntitySupport {
    constructor(root: any, service: any, handlers: any, allComponents: any);
    root: any;
    service: any;
    anySupport: AnySupport;
    commandHandlers: any;
    onStateSet: any;
    defaultValue: any;
    allComponents: any;
    create(call: any, init: any): ReplicatedEntityHandler;
}
/**
 * Callback for handling {@link module:akkaserverless.replicatedentity.ReplicatedEntityCommandContext#onStateChange}
 * events for a Replicated Entity, specific to a given streamed connection.
 *
 * The callback may not modify the Replicated Entity state, doing so will cause an error.
 *
 * @callback module:akkaserverless.replicatedentity.ReplicatedEntityCommandContext~onStateChangeCallback
 * @param {module:akkaserverless.replicatedentity.ReplicatedData} state The current Replicated Data state that has changed
 * @param {module:akkaserverless.replicatedentity.StateChangedContext} context The context for the state change.
 * @returns {undefined|object} If an object is returned, that will be sent as a message to the current streamed call.
 * It must be an object that conforms to this streamed commands output type.
 */
/**
 * Callback for handling {@link module:akkaserverless.replicatedentity.ReplicatedEntityCommandContext#onStreamCancel}
 * events for a Replicated Entity, specific to a given streamed connection.
 *
 * The callback may modify the Replicated Entity state if it pleases.
 *
 * @callback module:akkaserverless.replicatedentity.ReplicatedEntityCommandContext~onStreamCancelCallback
 * @param {module:akkaserverless.replicatedentity.ReplicatedData} state The current Replicated Data state that has changed
 * @param {module:akkaserverless.replicatedentity.StreamCancelledContext} context The context for the stream cancellation.
 */
export class ReplicatedEntityHandler {
    constructor(support: any, call: any, entityId: any);
    entity: any;
    call: any;
    entityId: any;
    currentState: any;
    streamId: string;
    commandHelper: CommandHelper;
    subscribers: Map<any, any>;
    cancelledCallbacks: Map<any, any>;
    commandHandlerFactory(commandName: any, grpcMethod: any): ((command: any, ctx: any) => Promise<any>) | null;
    setStateActionOnReply(ctx: any): Promise<void>;
    addStateManagementToContext(ctx: any): void;
    streamDebug(msg: any, ...args: any[]): void;
    handleInitialDelta(delta: any): void;
    onData(replicatedEntityStreamIn: any): Promise<void>;
    handleStateChange(): Promise<void>;
    handleStreamCancelled(cancelled: any): void;
    handleReplicatedEntityStreamIn(replicatedEntityStreamIn: any): Promise<void>;
    onEnd(): void;
}
import AnySupport = require("./protobuf-any");
import CommandHelper = require("./command-helper");
