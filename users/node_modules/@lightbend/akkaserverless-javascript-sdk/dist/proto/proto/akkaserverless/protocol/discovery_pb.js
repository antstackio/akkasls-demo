// source: akkaserverless/protocol/discovery.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.object.extend(proto, google_protobuf_descriptor_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.akkaserverless.protocol.Component', null, global);
goog.exportSymbol('proto.akkaserverless.protocol.Component.ComponentSettingsCase', null, global);
goog.exportSymbol('proto.akkaserverless.protocol.EntitySettings', null, global);
goog.exportSymbol('proto.akkaserverless.protocol.PassivationStrategy', null, global);
goog.exportSymbol('proto.akkaserverless.protocol.PassivationStrategy.StrategyCase', null, global);
goog.exportSymbol('proto.akkaserverless.protocol.ProxyInfo', null, global);
goog.exportSymbol('proto.akkaserverless.protocol.ServiceInfo', null, global);
goog.exportSymbol('proto.akkaserverless.protocol.Spec', null, global);
goog.exportSymbol('proto.akkaserverless.protocol.TimeoutPassivationStrategy', null, global);
goog.exportSymbol('proto.akkaserverless.protocol.UserFunctionError', null, global);
goog.exportSymbol('proto.akkaserverless.protocol.UserFunctionError.SourceLocation', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.protocol.Spec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.akkaserverless.protocol.Spec.repeatedFields_, null);
};
goog.inherits(proto.akkaserverless.protocol.Spec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.protocol.Spec.displayName = 'proto.akkaserverless.protocol.Spec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.protocol.ServiceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akkaserverless.protocol.ServiceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.protocol.ServiceInfo.displayName = 'proto.akkaserverless.protocol.ServiceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.protocol.Component = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.akkaserverless.protocol.Component.oneofGroups_);
};
goog.inherits(proto.akkaserverless.protocol.Component, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.protocol.Component.displayName = 'proto.akkaserverless.protocol.Component';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.protocol.EntitySettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akkaserverless.protocol.EntitySettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.protocol.EntitySettings.displayName = 'proto.akkaserverless.protocol.EntitySettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.protocol.PassivationStrategy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.akkaserverless.protocol.PassivationStrategy.oneofGroups_);
};
goog.inherits(proto.akkaserverless.protocol.PassivationStrategy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.protocol.PassivationStrategy.displayName = 'proto.akkaserverless.protocol.PassivationStrategy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.protocol.TimeoutPassivationStrategy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akkaserverless.protocol.TimeoutPassivationStrategy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.protocol.TimeoutPassivationStrategy.displayName = 'proto.akkaserverless.protocol.TimeoutPassivationStrategy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.protocol.UserFunctionError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.akkaserverless.protocol.UserFunctionError.repeatedFields_, null);
};
goog.inherits(proto.akkaserverless.protocol.UserFunctionError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.protocol.UserFunctionError.displayName = 'proto.akkaserverless.protocol.UserFunctionError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.akkaserverless.protocol.UserFunctionError.SourceLocation.repeatedFields_, null);
};
goog.inherits(proto.akkaserverless.protocol.UserFunctionError.SourceLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.protocol.UserFunctionError.SourceLocation.displayName = 'proto.akkaserverless.protocol.UserFunctionError.SourceLocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.protocol.ProxyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.akkaserverless.protocol.ProxyInfo.repeatedFields_, null);
};
goog.inherits(proto.akkaserverless.protocol.ProxyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.protocol.ProxyInfo.displayName = 'proto.akkaserverless.protocol.ProxyInfo';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.akkaserverless.protocol.Spec.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.protocol.Spec.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.protocol.Spec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.protocol.Spec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.Spec.toObject = function(includeInstance, msg) {
  var f, obj = {
    proto: msg.getProto_asB64(),
    componentsList: jspb.Message.toObjectList(msg.getComponentsList(),
    proto.akkaserverless.protocol.Component.toObject, includeInstance),
    serviceInfo: (f = msg.getServiceInfo()) && proto.akkaserverless.protocol.ServiceInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.protocol.Spec}
 */
proto.akkaserverless.protocol.Spec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.protocol.Spec;
  return proto.akkaserverless.protocol.Spec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.protocol.Spec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.protocol.Spec}
 */
proto.akkaserverless.protocol.Spec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProto(value);
      break;
    case 2:
      var value = new proto.akkaserverless.protocol.Component;
      reader.readMessage(value,proto.akkaserverless.protocol.Component.deserializeBinaryFromReader);
      msg.addComponents(value);
      break;
    case 3:
      var value = new proto.akkaserverless.protocol.ServiceInfo;
      reader.readMessage(value,proto.akkaserverless.protocol.ServiceInfo.deserializeBinaryFromReader);
      msg.setServiceInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.protocol.Spec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.protocol.Spec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.protocol.Spec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.Spec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProto_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getComponentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.akkaserverless.protocol.Component.serializeBinaryToWriter
    );
  }
  f = message.getServiceInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.akkaserverless.protocol.ServiceInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes proto = 1;
 * @return {string}
 */
proto.akkaserverless.protocol.Spec.prototype.getProto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes proto = 1;
 * This is a type-conversion wrapper around `getProto()`
 * @return {string}
 */
proto.akkaserverless.protocol.Spec.prototype.getProto_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProto()));
};


/**
 * optional bytes proto = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProto()`
 * @return {!Uint8Array}
 */
proto.akkaserverless.protocol.Spec.prototype.getProto_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProto()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.akkaserverless.protocol.Spec} returns this
 */
proto.akkaserverless.protocol.Spec.prototype.setProto = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Component components = 2;
 * @return {!Array<!proto.akkaserverless.protocol.Component>}
 */
proto.akkaserverless.protocol.Spec.prototype.getComponentsList = function() {
  return /** @type{!Array<!proto.akkaserverless.protocol.Component>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.akkaserverless.protocol.Component, 2));
};


/**
 * @param {!Array<!proto.akkaserverless.protocol.Component>} value
 * @return {!proto.akkaserverless.protocol.Spec} returns this
*/
proto.akkaserverless.protocol.Spec.prototype.setComponentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.akkaserverless.protocol.Component=} opt_value
 * @param {number=} opt_index
 * @return {!proto.akkaserverless.protocol.Component}
 */
proto.akkaserverless.protocol.Spec.prototype.addComponents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.akkaserverless.protocol.Component, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.akkaserverless.protocol.Spec} returns this
 */
proto.akkaserverless.protocol.Spec.prototype.clearComponentsList = function() {
  return this.setComponentsList([]);
};


/**
 * optional ServiceInfo service_info = 3;
 * @return {?proto.akkaserverless.protocol.ServiceInfo}
 */
proto.akkaserverless.protocol.Spec.prototype.getServiceInfo = function() {
  return /** @type{?proto.akkaserverless.protocol.ServiceInfo} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.protocol.ServiceInfo, 3));
};


/**
 * @param {?proto.akkaserverless.protocol.ServiceInfo|undefined} value
 * @return {!proto.akkaserverless.protocol.Spec} returns this
*/
proto.akkaserverless.protocol.Spec.prototype.setServiceInfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.protocol.Spec} returns this
 */
proto.akkaserverless.protocol.Spec.prototype.clearServiceInfo = function() {
  return this.setServiceInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.protocol.Spec.prototype.hasServiceInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.protocol.ServiceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.protocol.ServiceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.protocol.ServiceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.ServiceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serviceVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    serviceRuntime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    supportLibraryName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    supportLibraryVersion: jspb.Message.getFieldWithDefault(msg, 5, ""),
    protocolMajorVersion: jspb.Message.getFieldWithDefault(msg, 6, 0),
    protocolMinorVersion: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.protocol.ServiceInfo}
 */
proto.akkaserverless.protocol.ServiceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.protocol.ServiceInfo;
  return proto.akkaserverless.protocol.ServiceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.protocol.ServiceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.protocol.ServiceInfo}
 */
proto.akkaserverless.protocol.ServiceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceRuntime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSupportLibraryName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSupportLibraryVersion(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProtocolMajorVersion(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProtocolMinorVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.protocol.ServiceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.protocol.ServiceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.protocol.ServiceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.ServiceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServiceVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getServiceRuntime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSupportLibraryName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSupportLibraryVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getProtocolMajorVersion();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getProtocolMinorVersion();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string service_name = 1;
 * @return {string}
 */
proto.akkaserverless.protocol.ServiceInfo.prototype.getServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.protocol.ServiceInfo} returns this
 */
proto.akkaserverless.protocol.ServiceInfo.prototype.setServiceName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string service_version = 2;
 * @return {string}
 */
proto.akkaserverless.protocol.ServiceInfo.prototype.getServiceVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.protocol.ServiceInfo} returns this
 */
proto.akkaserverless.protocol.ServiceInfo.prototype.setServiceVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string service_runtime = 3;
 * @return {string}
 */
proto.akkaserverless.protocol.ServiceInfo.prototype.getServiceRuntime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.protocol.ServiceInfo} returns this
 */
proto.akkaserverless.protocol.ServiceInfo.prototype.setServiceRuntime = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string support_library_name = 4;
 * @return {string}
 */
proto.akkaserverless.protocol.ServiceInfo.prototype.getSupportLibraryName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.protocol.ServiceInfo} returns this
 */
proto.akkaserverless.protocol.ServiceInfo.prototype.setSupportLibraryName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string support_library_version = 5;
 * @return {string}
 */
proto.akkaserverless.protocol.ServiceInfo.prototype.getSupportLibraryVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.protocol.ServiceInfo} returns this
 */
proto.akkaserverless.protocol.ServiceInfo.prototype.setSupportLibraryVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 protocol_major_version = 6;
 * @return {number}
 */
proto.akkaserverless.protocol.ServiceInfo.prototype.getProtocolMajorVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.akkaserverless.protocol.ServiceInfo} returns this
 */
proto.akkaserverless.protocol.ServiceInfo.prototype.setProtocolMajorVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 protocol_minor_version = 7;
 * @return {number}
 */
proto.akkaserverless.protocol.ServiceInfo.prototype.getProtocolMinorVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.akkaserverless.protocol.ServiceInfo} returns this
 */
proto.akkaserverless.protocol.ServiceInfo.prototype.setProtocolMinorVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.akkaserverless.protocol.Component.oneofGroups_ = [[3]];

/**
 * @enum {number}
 */
proto.akkaserverless.protocol.Component.ComponentSettingsCase = {
  COMPONENT_SETTINGS_NOT_SET: 0,
  ENTITY: 3
};

/**
 * @return {proto.akkaserverless.protocol.Component.ComponentSettingsCase}
 */
proto.akkaserverless.protocol.Component.prototype.getComponentSettingsCase = function() {
  return /** @type {proto.akkaserverless.protocol.Component.ComponentSettingsCase} */(jspb.Message.computeOneofCase(this, proto.akkaserverless.protocol.Component.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.protocol.Component.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.protocol.Component.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.protocol.Component} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.Component.toObject = function(includeInstance, msg) {
  var f, obj = {
    componentType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serviceName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    entity: (f = msg.getEntity()) && proto.akkaserverless.protocol.EntitySettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.protocol.Component}
 */
proto.akkaserverless.protocol.Component.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.protocol.Component;
  return proto.akkaserverless.protocol.Component.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.protocol.Component} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.protocol.Component}
 */
proto.akkaserverless.protocol.Component.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setComponentType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceName(value);
      break;
    case 3:
      var value = new proto.akkaserverless.protocol.EntitySettings;
      reader.readMessage(value,proto.akkaserverless.protocol.EntitySettings.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.protocol.Component.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.protocol.Component.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.protocol.Component} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.Component.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComponentType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServiceName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.akkaserverless.protocol.EntitySettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional string component_type = 1;
 * @return {string}
 */
proto.akkaserverless.protocol.Component.prototype.getComponentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.protocol.Component} returns this
 */
proto.akkaserverless.protocol.Component.prototype.setComponentType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string service_name = 2;
 * @return {string}
 */
proto.akkaserverless.protocol.Component.prototype.getServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.protocol.Component} returns this
 */
proto.akkaserverless.protocol.Component.prototype.setServiceName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional EntitySettings entity = 3;
 * @return {?proto.akkaserverless.protocol.EntitySettings}
 */
proto.akkaserverless.protocol.Component.prototype.getEntity = function() {
  return /** @type{?proto.akkaserverless.protocol.EntitySettings} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.protocol.EntitySettings, 3));
};


/**
 * @param {?proto.akkaserverless.protocol.EntitySettings|undefined} value
 * @return {!proto.akkaserverless.protocol.Component} returns this
*/
proto.akkaserverless.protocol.Component.prototype.setEntity = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.akkaserverless.protocol.Component.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.protocol.Component} returns this
 */
proto.akkaserverless.protocol.Component.prototype.clearEntity = function() {
  return this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.protocol.Component.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.protocol.EntitySettings.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.protocol.EntitySettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.protocol.EntitySettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.EntitySettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    entityType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    passivationStrategy: (f = msg.getPassivationStrategy()) && proto.akkaserverless.protocol.PassivationStrategy.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.protocol.EntitySettings}
 */
proto.akkaserverless.protocol.EntitySettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.protocol.EntitySettings;
  return proto.akkaserverless.protocol.EntitySettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.protocol.EntitySettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.protocol.EntitySettings}
 */
proto.akkaserverless.protocol.EntitySettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntityType(value);
      break;
    case 4:
      var value = new proto.akkaserverless.protocol.PassivationStrategy;
      reader.readMessage(value,proto.akkaserverless.protocol.PassivationStrategy.deserializeBinaryFromReader);
      msg.setPassivationStrategy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.protocol.EntitySettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.protocol.EntitySettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.protocol.EntitySettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.EntitySettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntityType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPassivationStrategy();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.akkaserverless.protocol.PassivationStrategy.serializeBinaryToWriter
    );
  }
};


/**
 * optional string entity_type = 3;
 * @return {string}
 */
proto.akkaserverless.protocol.EntitySettings.prototype.getEntityType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.protocol.EntitySettings} returns this
 */
proto.akkaserverless.protocol.EntitySettings.prototype.setEntityType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional PassivationStrategy passivation_strategy = 4;
 * @return {?proto.akkaserverless.protocol.PassivationStrategy}
 */
proto.akkaserverless.protocol.EntitySettings.prototype.getPassivationStrategy = function() {
  return /** @type{?proto.akkaserverless.protocol.PassivationStrategy} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.protocol.PassivationStrategy, 4));
};


/**
 * @param {?proto.akkaserverless.protocol.PassivationStrategy|undefined} value
 * @return {!proto.akkaserverless.protocol.EntitySettings} returns this
*/
proto.akkaserverless.protocol.EntitySettings.prototype.setPassivationStrategy = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.protocol.EntitySettings} returns this
 */
proto.akkaserverless.protocol.EntitySettings.prototype.clearPassivationStrategy = function() {
  return this.setPassivationStrategy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.protocol.EntitySettings.prototype.hasPassivationStrategy = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.akkaserverless.protocol.PassivationStrategy.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.akkaserverless.protocol.PassivationStrategy.StrategyCase = {
  STRATEGY_NOT_SET: 0,
  TIMEOUT: 1
};

/**
 * @return {proto.akkaserverless.protocol.PassivationStrategy.StrategyCase}
 */
proto.akkaserverless.protocol.PassivationStrategy.prototype.getStrategyCase = function() {
  return /** @type {proto.akkaserverless.protocol.PassivationStrategy.StrategyCase} */(jspb.Message.computeOneofCase(this, proto.akkaserverless.protocol.PassivationStrategy.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.protocol.PassivationStrategy.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.protocol.PassivationStrategy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.protocol.PassivationStrategy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.PassivationStrategy.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeout: (f = msg.getTimeout()) && proto.akkaserverless.protocol.TimeoutPassivationStrategy.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.protocol.PassivationStrategy}
 */
proto.akkaserverless.protocol.PassivationStrategy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.protocol.PassivationStrategy;
  return proto.akkaserverless.protocol.PassivationStrategy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.protocol.PassivationStrategy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.protocol.PassivationStrategy}
 */
proto.akkaserverless.protocol.PassivationStrategy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.akkaserverless.protocol.TimeoutPassivationStrategy;
      reader.readMessage(value,proto.akkaserverless.protocol.TimeoutPassivationStrategy.deserializeBinaryFromReader);
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.protocol.PassivationStrategy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.protocol.PassivationStrategy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.protocol.PassivationStrategy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.PassivationStrategy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeout();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.akkaserverless.protocol.TimeoutPassivationStrategy.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeoutPassivationStrategy timeout = 1;
 * @return {?proto.akkaserverless.protocol.TimeoutPassivationStrategy}
 */
proto.akkaserverless.protocol.PassivationStrategy.prototype.getTimeout = function() {
  return /** @type{?proto.akkaserverless.protocol.TimeoutPassivationStrategy} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.protocol.TimeoutPassivationStrategy, 1));
};


/**
 * @param {?proto.akkaserverless.protocol.TimeoutPassivationStrategy|undefined} value
 * @return {!proto.akkaserverless.protocol.PassivationStrategy} returns this
*/
proto.akkaserverless.protocol.PassivationStrategy.prototype.setTimeout = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.akkaserverless.protocol.PassivationStrategy.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.protocol.PassivationStrategy} returns this
 */
proto.akkaserverless.protocol.PassivationStrategy.prototype.clearTimeout = function() {
  return this.setTimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.protocol.PassivationStrategy.prototype.hasTimeout = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.protocol.TimeoutPassivationStrategy.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.protocol.TimeoutPassivationStrategy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.protocol.TimeoutPassivationStrategy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.TimeoutPassivationStrategy.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeout: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.protocol.TimeoutPassivationStrategy}
 */
proto.akkaserverless.protocol.TimeoutPassivationStrategy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.protocol.TimeoutPassivationStrategy;
  return proto.akkaserverless.protocol.TimeoutPassivationStrategy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.protocol.TimeoutPassivationStrategy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.protocol.TimeoutPassivationStrategy}
 */
proto.akkaserverless.protocol.TimeoutPassivationStrategy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.protocol.TimeoutPassivationStrategy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.protocol.TimeoutPassivationStrategy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.protocol.TimeoutPassivationStrategy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.TimeoutPassivationStrategy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 timeout = 1;
 * @return {number}
 */
proto.akkaserverless.protocol.TimeoutPassivationStrategy.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.akkaserverless.protocol.TimeoutPassivationStrategy} returns this
 */
proto.akkaserverless.protocol.TimeoutPassivationStrategy.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.akkaserverless.protocol.UserFunctionError.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.protocol.UserFunctionError.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.protocol.UserFunctionError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.protocol.UserFunctionError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.UserFunctionError.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    detail: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sourceLocationsList: jspb.Message.toObjectList(msg.getSourceLocationsList(),
    proto.akkaserverless.protocol.UserFunctionError.SourceLocation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.protocol.UserFunctionError}
 */
proto.akkaserverless.protocol.UserFunctionError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.protocol.UserFunctionError;
  return proto.akkaserverless.protocol.UserFunctionError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.protocol.UserFunctionError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.protocol.UserFunctionError}
 */
proto.akkaserverless.protocol.UserFunctionError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetail(value);
      break;
    case 4:
      var value = new proto.akkaserverless.protocol.UserFunctionError.SourceLocation;
      reader.readMessage(value,proto.akkaserverless.protocol.UserFunctionError.SourceLocation.deserializeBinaryFromReader);
      msg.addSourceLocations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.protocol.UserFunctionError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.protocol.UserFunctionError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.protocol.UserFunctionError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.UserFunctionError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDetail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSourceLocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.akkaserverless.protocol.UserFunctionError.SourceLocation.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.protocol.UserFunctionError.SourceLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.protocol.UserFunctionError.SourceLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startLine: jspb.Message.getFieldWithDefault(msg, 2, 0),
    startCol: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endLine: jspb.Message.getFieldWithDefault(msg, 4, 0),
    endCol: jspb.Message.getFieldWithDefault(msg, 5, 0),
    protoPathList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.protocol.UserFunctionError.SourceLocation}
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.protocol.UserFunctionError.SourceLocation;
  return proto.akkaserverless.protocol.UserFunctionError.SourceLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.protocol.UserFunctionError.SourceLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.protocol.UserFunctionError.SourceLocation}
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartLine(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartCol(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndLine(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndCol(value);
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addProtoPath(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.protocol.UserFunctionError.SourceLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.protocol.UserFunctionError.SourceLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFileName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartLine();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStartCol();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEndLine();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getEndCol();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getProtoPathList();
  if (f.length > 0) {
    writer.writePackedInt32(
      6,
      f
    );
  }
};


/**
 * optional string file_name = 1;
 * @return {string}
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.protocol.UserFunctionError.SourceLocation} returns this
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.prototype.setFileName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 start_line = 2;
 * @return {number}
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.prototype.getStartLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.akkaserverless.protocol.UserFunctionError.SourceLocation} returns this
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.prototype.setStartLine = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 start_col = 3;
 * @return {number}
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.prototype.getStartCol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.akkaserverless.protocol.UserFunctionError.SourceLocation} returns this
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.prototype.setStartCol = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 end_line = 4;
 * @return {number}
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.prototype.getEndLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.akkaserverless.protocol.UserFunctionError.SourceLocation} returns this
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.prototype.setEndLine = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 end_col = 5;
 * @return {number}
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.prototype.getEndCol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.akkaserverless.protocol.UserFunctionError.SourceLocation} returns this
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.prototype.setEndCol = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated int32 proto_path = 6;
 * @return {!Array<number>}
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.prototype.getProtoPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.akkaserverless.protocol.UserFunctionError.SourceLocation} returns this
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.prototype.setProtoPathList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.akkaserverless.protocol.UserFunctionError.SourceLocation} returns this
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.prototype.addProtoPath = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.akkaserverless.protocol.UserFunctionError.SourceLocation} returns this
 */
proto.akkaserverless.protocol.UserFunctionError.SourceLocation.prototype.clearProtoPathList = function() {
  return this.setProtoPathList([]);
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.akkaserverless.protocol.UserFunctionError.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.protocol.UserFunctionError} returns this
 */
proto.akkaserverless.protocol.UserFunctionError.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.akkaserverless.protocol.UserFunctionError.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.protocol.UserFunctionError} returns this
 */
proto.akkaserverless.protocol.UserFunctionError.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string detail = 3;
 * @return {string}
 */
proto.akkaserverless.protocol.UserFunctionError.prototype.getDetail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.protocol.UserFunctionError} returns this
 */
proto.akkaserverless.protocol.UserFunctionError.prototype.setDetail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated SourceLocation source_locations = 4;
 * @return {!Array<!proto.akkaserverless.protocol.UserFunctionError.SourceLocation>}
 */
proto.akkaserverless.protocol.UserFunctionError.prototype.getSourceLocationsList = function() {
  return /** @type{!Array<!proto.akkaserverless.protocol.UserFunctionError.SourceLocation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.akkaserverless.protocol.UserFunctionError.SourceLocation, 4));
};


/**
 * @param {!Array<!proto.akkaserverless.protocol.UserFunctionError.SourceLocation>} value
 * @return {!proto.akkaserverless.protocol.UserFunctionError} returns this
*/
proto.akkaserverless.protocol.UserFunctionError.prototype.setSourceLocationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.akkaserverless.protocol.UserFunctionError.SourceLocation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.akkaserverless.protocol.UserFunctionError.SourceLocation}
 */
proto.akkaserverless.protocol.UserFunctionError.prototype.addSourceLocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.akkaserverless.protocol.UserFunctionError.SourceLocation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.akkaserverless.protocol.UserFunctionError} returns this
 */
proto.akkaserverless.protocol.UserFunctionError.prototype.clearSourceLocationsList = function() {
  return this.setSourceLocationsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.akkaserverless.protocol.ProxyInfo.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.protocol.ProxyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.protocol.ProxyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.protocol.ProxyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.ProxyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocolMajorVersion: jspb.Message.getFieldWithDefault(msg, 1, 0),
    protocolMinorVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    proxyName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    proxyVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    supportedEntityTypesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    devMode: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.protocol.ProxyInfo}
 */
proto.akkaserverless.protocol.ProxyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.protocol.ProxyInfo;
  return proto.akkaserverless.protocol.ProxyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.protocol.ProxyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.protocol.ProxyInfo}
 */
proto.akkaserverless.protocol.ProxyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProtocolMajorVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProtocolMinorVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProxyName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProxyVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addSupportedEntityTypes(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDevMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.protocol.ProxyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.protocol.ProxyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.protocol.ProxyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.protocol.ProxyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocolMajorVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProtocolMinorVersion();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getProxyName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProxyVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSupportedEntityTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getDevMode();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional int32 protocol_major_version = 1;
 * @return {number}
 */
proto.akkaserverless.protocol.ProxyInfo.prototype.getProtocolMajorVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.akkaserverless.protocol.ProxyInfo} returns this
 */
proto.akkaserverless.protocol.ProxyInfo.prototype.setProtocolMajorVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 protocol_minor_version = 2;
 * @return {number}
 */
proto.akkaserverless.protocol.ProxyInfo.prototype.getProtocolMinorVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.akkaserverless.protocol.ProxyInfo} returns this
 */
proto.akkaserverless.protocol.ProxyInfo.prototype.setProtocolMinorVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string proxy_name = 3;
 * @return {string}
 */
proto.akkaserverless.protocol.ProxyInfo.prototype.getProxyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.protocol.ProxyInfo} returns this
 */
proto.akkaserverless.protocol.ProxyInfo.prototype.setProxyName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string proxy_version = 4;
 * @return {string}
 */
proto.akkaserverless.protocol.ProxyInfo.prototype.getProxyVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.protocol.ProxyInfo} returns this
 */
proto.akkaserverless.protocol.ProxyInfo.prototype.setProxyVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string supported_entity_types = 5;
 * @return {!Array<string>}
 */
proto.akkaserverless.protocol.ProxyInfo.prototype.getSupportedEntityTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.akkaserverless.protocol.ProxyInfo} returns this
 */
proto.akkaserverless.protocol.ProxyInfo.prototype.setSupportedEntityTypesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.akkaserverless.protocol.ProxyInfo} returns this
 */
proto.akkaserverless.protocol.ProxyInfo.prototype.addSupportedEntityTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.akkaserverless.protocol.ProxyInfo} returns this
 */
proto.akkaserverless.protocol.ProxyInfo.prototype.clearSupportedEntityTypesList = function() {
  return this.setSupportedEntityTypesList([]);
};


/**
 * optional bool dev_mode = 6;
 * @return {boolean}
 */
proto.akkaserverless.protocol.ProxyInfo.prototype.getDevMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.akkaserverless.protocol.ProxyInfo} returns this
 */
proto.akkaserverless.protocol.ProxyInfo.prototype.setDevMode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


goog.object.extend(exports, proto.akkaserverless.protocol);
