import { BoundPorts } from "testcontainers/dist/bound-ports";
import { Container } from "testcontainers/dist/container";
import { ContainerState } from "testcontainers/dist/container-state";
import { DockerClient } from "testcontainers/dist/docker-client";
import { PortCheck } from "testcontainers/dist/port-check";
export interface WaitStrategy {
    waitUntilReady(container: Container, containerState: ContainerState, boundPorts: BoundPorts): Promise<void>;
    withStartupTimeout(startupTimeout: number): WaitStrategy;
}
declare abstract class AbstractWaitStrategy implements WaitStrategy {
    protected startupTimeout: number;
    abstract waitUntilReady(container: Container, containerState: ContainerState, boundPorts: BoundPorts): Promise<void>;
    withStartupTimeout(startupTimeout: number): WaitStrategy;
}
export declare class HostPortWaitStrategy extends AbstractWaitStrategy {
    private readonly dockerClient;
    private readonly hostPortCheck;
    private readonly internalPortCheck;
    constructor(dockerClient: DockerClient, hostPortCheck: PortCheck, internalPortCheck: PortCheck);
    waitUntilReady(container: Container, containerState: ContainerState, boundPorts: BoundPorts): Promise<void>;
    private waitForHostPorts;
    private waitForInternalPorts;
    private waitForPort;
}
export declare type Log = string;
export declare class LogWaitStrategy extends AbstractWaitStrategy {
    private readonly message;
    constructor(message: Log | RegExp);
    waitUntilReady(container: Container): Promise<void>;
}
export declare class HealthCheckWaitStrategy extends AbstractWaitStrategy {
    waitUntilReady(container: Container): Promise<void>;
}
export {};
