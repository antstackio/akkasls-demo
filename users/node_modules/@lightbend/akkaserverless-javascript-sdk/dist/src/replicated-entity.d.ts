declare const _exports: {
    ReplicatedData: {
        PNCounter: () => void;
        ORSet: () => void;
        Vote: () => void;
        GCounter: () => void;
        ORMap: () => void;
        WriteConsistencies: unknown[];
        GSet: () => void;
        LWWRegister: (arg0: any, arg1: any, arg2: number | undefined) => void;
        Flag: () => void;
        Clocks: unknown[];
    };
    ReplicatedEntity: module;
};
export = _exports;
/**
 * :akkaserverless.replicatedentity.ReplicatedEntity~options
 */
export type module = {
    /**
     * The directories to include when looking up imported protobuf files.
     */
    includeDirs: any;
};
/**
 * Options for creating a Replicated Entity.
 *
 * @typedef module:akkaserverless.replicatedentity.ReplicatedEntity~options
 * @property {array<string>} includeDirs The directories to include when looking up imported protobuf files.
 */
/**
 * A command handler callback.
 *
 * @callback module:akkaserverless.replicatedentity.ReplicatedEntity~commandHandler
 * @param {Object} command The command message, this will be of the type of the gRPC service call input type.
 * @param {module:akkaserverless.replicatedentity.ReplicatedEntityCommandContext} context The command context.
 * @returns {undefined|Object} The message to reply with, it must match the gRPC service call output type for this
 * command.
 */
/**
 * A state set handler callback.
 *
 * This is invoked whenever a new state is set on the Replicated Entity, to allow the state to be enriched with domain
 * specific properties and methods. This may be due to the state being set explicitly from a command handler on the
 * command context, or implicitly as the default value, or implicitly when a new state is received from the proxy.
 *
 * @callback module:akkaserverless.replicatedentity.ReplicatedEntity~onStateSetCallback
 * @param {module:akkaserverless.replicatedentity.ReplicatedData} state The Replicated Data state that was set.
 * @param {string} entityId The id of the entity.
 */
/**
 * A callback that is invoked to create a default value if the Akka Serverless proxy doesn't send an existing one.
 *
 * @callback module:akkaserverless.replicatedentity.ReplicatedEntity~defaultValueCallback
 * @param {string} entityId The id of the entity.
 * @returns {Object} The default value to use for this entity.
 */
/**
 * Callback for handling elements iterated through by {@link module:akkaserverless.replicatedentity.GSet#forEach}.
 *
 * @callback module:akkaserverless.replicatedentity.GSet~forEachCallback
 * @param {module:akkaserverless.Serializable} element The element.
 */
/**
 * Generator for default values.
 *
 * This is invoked by get when the current map has no Replicated Data defined for the key.
 *
 * If this returns a Replicated Data object, it will be added to the map.
 *
 * Care should be taken when using this, since it means that the get method can trigger elements to be created. If
 * using default values, the get method should not be used in queries where an empty value for the Replicated Data
 * means the value is not present.
 *
 * @callback module:akkaserverless.replicatedentity.ORMap~defaultValueCallback
 * @param {module:akkaserverless.Serializable} key The key the default value is being generated for.
 * @returns {undefined|module:akkaserverless.replicatedentity.ReplicatedData} The default value, or undefined if no default value should be returned.
 */
/**
 * Callback for handling elements iterated through by {@link module:akkaserverless.replicatedentity.ORMap#forEach}.
 *
 * @callback module:akkaserverless.replicatedentity.ORMap~forEachCallback
 * @param {module:akkaserverless.replicatedentity.ReplicatedData} value The Replicated Data value.
 * @param {module:akkaserverless.Serializable} key The key.
 * @param {module:akkaserverless.ORMap} This map.
 */
/**
 * Callback for handling elements iterated through by {@link module:akkaserverless.replicatedentity.ORSet#forEach}.
 *
 * @callback module:akkaserverless.replicatedentity.ORSet~forEachCallback
 * @param {module:akkaserverless.Serializable} element The element.
 */
/**
 * A Replicated Entity.
 *
 * @memberOf module:akkaserverless.replicatedentity
 * @implements module:akkaserverless.Entity
 */
declare class ReplicatedEntity implements module {
    /**
     * Create a Replicated Entity.
     *
     * @param desc {string|string[]} The file name of a protobuf descriptor or set of descriptors containing the
     *                               Replicated Entity service.
     * @param serviceName {string} The fully qualified name of the gRPC service that this Replicated Entity implements.
     * @param {string} entityType The entity type name, used to namespace entities of different Replicated Data
     *                            types in the same service.
     * @param options {module:akkaserverless.replicatedentity.ReplicatedEntity~options=} The options.
     */
    constructor(desc: string | string[], serviceName: string, entityType: string, options: any);
    options: any;
    root: protobuf.Root;
    serviceName: string;
    service: protobuf.Service;
    grpc: grpc.GrpcObject;
    /**
     * The command handlers.
     *
     * The names of the properties must match the names of the service calls specified in the gRPC descriptor for this
     * Replicated Entity service.
     *
     * @type {Object.<string, module:akkaserverless.replicatedentity.ReplicatedEntity~commandHandler>}
     */
    commandHandlers: {
        [x: string]: module;
    };
    /**
     * A callback that is invoked whenever the Replicated Data state is set for this Replicated Entity.
     *
     * This is invoked whenever a new Replicated Data state is set on the Replicated Entity, to allow the state to be
     * enriched with domain specific properties and methods. This may be due to the state being set explicitly from a
     * command handler on the command context, or implicitly as the default value, or implicitly when a new state is
     * received from the proxy.
     *
     * @member {module:akkaserverless.replicatedentity.ReplicatedEntity~onStateSetCallback} module:akkaserverless.replicatedentity.ReplicatedEntity#onStateSet
     */
    onStateSet: (state: any, entityId: any) => undefined;
    /**
     * A callback that is invoked to create a default value if the Akka Serverless proxy doesn't send an existing one.
     *
     * @member {module:akkaserverless.replicatedentity.ReplicatedEntity~defaultValueCallback} module:akkaserverless.replicatedentity.ReplicatedEntity#defaultValue
     */
    defaultValue: (entityId: any) => null;
    componentType(): string;
    /**
     * Lookup a Protobuf message type.
     *
     * This is provided as a convenience to lookup protobuf message types for use, for example, as values in sets and
     * maps.
     *
     * @param {string} messageType The fully qualified name of the type to lookup.
     */
    lookupType(messageType: string): protobuf.Type;
    /**
     * @param allComponents
     * @return {ReplicatedEntityServices}
     */
    register(allComponents: any): any;
    start(options: any): number;
    server: AkkaServerless | undefined;
    shutdown(): void;
}
declare namespace module {
    namespace exports {
        export { module };
    }
}
import grpc = require("@grpc/grpc-js");
import AkkaServerless = require("./akkaserverless");
