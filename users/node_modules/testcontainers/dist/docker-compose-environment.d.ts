import { EnvKey, EnvValue } from "testcontainers/dist/docker-client";
import { StartedGenericContainer } from "testcontainers/dist/generic-container";
import { WaitStrategy } from "testcontainers/dist/wait-strategy";
import { Uuid } from "testcontainers/dist/uuid";
export declare class DockerComposeEnvironment {
    private readonly composeFilePath;
    private readonly composeFiles;
    private readonly projectName;
    private build;
    private env;
    private waitStrategy;
    private startupTimeout;
    constructor(composeFilePath: string, composeFiles: string | string[], uuid?: Uuid);
    withBuild(): this;
    withEnv(key: EnvKey, value: EnvValue): this;
    withWaitStrategy(containerName: string, waitStrategy: WaitStrategy): this;
    withStartupTimeout(startupTimeout: number): this;
    up(): Promise<StartedDockerComposeEnvironment>;
    private upAll;
    private getBoundPorts;
    private waitForContainer;
    private getWaitStrategy;
}
export declare class StartedDockerComposeEnvironment {
    private readonly composeFilePath;
    private readonly composeFiles;
    private readonly projectName;
    private readonly startedGenericContainers;
    constructor(composeFilePath: string, composeFiles: string | string[], projectName: string, startedGenericContainers: {
        [containerName: string]: StartedGenericContainer;
    });
    stop(): Promise<StoppedDockerComposeEnvironment>;
    down(): Promise<DownedDockerComposeEnvironment>;
    getContainer(containerName: string): StartedGenericContainer;
}
export declare class StoppedDockerComposeEnvironment {
    private readonly composeFilePath;
    private readonly composeFiles;
    private readonly projectName;
    constructor(composeFilePath: string, composeFiles: string | string[], projectName: string);
    down(): Promise<DownedDockerComposeEnvironment>;
}
export declare class DownedDockerComposeEnvironment {
}
