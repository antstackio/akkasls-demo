// source: akkaserverless/component/component.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.object.extend(proto, google_protobuf_descriptor_pb);
goog.exportSymbol('proto.akkaserverless.component.ClientAction', null, global);
goog.exportSymbol('proto.akkaserverless.component.ClientAction.ActionCase', null, global);
goog.exportSymbol('proto.akkaserverless.component.Failure', null, global);
goog.exportSymbol('proto.akkaserverless.component.Forward', null, global);
goog.exportSymbol('proto.akkaserverless.component.Metadata', null, global);
goog.exportSymbol('proto.akkaserverless.component.MetadataEntry', null, global);
goog.exportSymbol('proto.akkaserverless.component.MetadataEntry.ValueCase', null, global);
goog.exportSymbol('proto.akkaserverless.component.Reply', null, global);
goog.exportSymbol('proto.akkaserverless.component.SideEffect', null, global);
goog.exportSymbol('proto.akkaserverless.component.StreamCancelled', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.component.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.akkaserverless.component.Metadata.repeatedFields_, null);
};
goog.inherits(proto.akkaserverless.component.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.component.Metadata.displayName = 'proto.akkaserverless.component.Metadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.component.MetadataEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.akkaserverless.component.MetadataEntry.oneofGroups_);
};
goog.inherits(proto.akkaserverless.component.MetadataEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.component.MetadataEntry.displayName = 'proto.akkaserverless.component.MetadataEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.component.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akkaserverless.component.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.component.Reply.displayName = 'proto.akkaserverless.component.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.component.Forward = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akkaserverless.component.Forward, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.component.Forward.displayName = 'proto.akkaserverless.component.Forward';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.component.ClientAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.akkaserverless.component.ClientAction.oneofGroups_);
};
goog.inherits(proto.akkaserverless.component.ClientAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.component.ClientAction.displayName = 'proto.akkaserverless.component.ClientAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.component.SideEffect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akkaserverless.component.SideEffect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.component.SideEffect.displayName = 'proto.akkaserverless.component.SideEffect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.component.StreamCancelled = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akkaserverless.component.StreamCancelled, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.component.StreamCancelled.displayName = 'proto.akkaserverless.component.StreamCancelled';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.component.Failure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akkaserverless.component.Failure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.component.Failure.displayName = 'proto.akkaserverless.component.Failure';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.akkaserverless.component.Metadata.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.component.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.component.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.component.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.akkaserverless.component.MetadataEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.component.Metadata}
 */
proto.akkaserverless.component.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.component.Metadata;
  return proto.akkaserverless.component.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.component.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.component.Metadata}
 */
proto.akkaserverless.component.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.akkaserverless.component.MetadataEntry;
      reader.readMessage(value,proto.akkaserverless.component.MetadataEntry.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.component.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.component.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.component.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.akkaserverless.component.MetadataEntry.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MetadataEntry entries = 1;
 * @return {!Array<!proto.akkaserverless.component.MetadataEntry>}
 */
proto.akkaserverless.component.Metadata.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.akkaserverless.component.MetadataEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.akkaserverless.component.MetadataEntry, 1));
};


/**
 * @param {!Array<!proto.akkaserverless.component.MetadataEntry>} value
 * @return {!proto.akkaserverless.component.Metadata} returns this
*/
proto.akkaserverless.component.Metadata.prototype.setEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.akkaserverless.component.MetadataEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.akkaserverless.component.MetadataEntry}
 */
proto.akkaserverless.component.Metadata.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.akkaserverless.component.MetadataEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.akkaserverless.component.Metadata} returns this
 */
proto.akkaserverless.component.Metadata.prototype.clearEntriesList = function() {
  return this.setEntriesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.akkaserverless.component.MetadataEntry.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.akkaserverless.component.MetadataEntry.ValueCase = {
  VALUE_NOT_SET: 0,
  STRING_VALUE: 2,
  BYTES_VALUE: 3
};

/**
 * @return {proto.akkaserverless.component.MetadataEntry.ValueCase}
 */
proto.akkaserverless.component.MetadataEntry.prototype.getValueCase = function() {
  return /** @type {proto.akkaserverless.component.MetadataEntry.ValueCase} */(jspb.Message.computeOneofCase(this, proto.akkaserverless.component.MetadataEntry.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.component.MetadataEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.component.MetadataEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.component.MetadataEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.MetadataEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stringValue: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bytesValue: msg.getBytesValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.component.MetadataEntry}
 */
proto.akkaserverless.component.MetadataEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.component.MetadataEntry;
  return proto.akkaserverless.component.MetadataEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.component.MetadataEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.component.MetadataEntry}
 */
proto.akkaserverless.component.MetadataEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.component.MetadataEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.component.MetadataEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.component.MetadataEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.MetadataEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.akkaserverless.component.MetadataEntry.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.component.MetadataEntry} returns this
 */
proto.akkaserverless.component.MetadataEntry.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string string_value = 2;
 * @return {string}
 */
proto.akkaserverless.component.MetadataEntry.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.component.MetadataEntry} returns this
 */
proto.akkaserverless.component.MetadataEntry.prototype.setStringValue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.akkaserverless.component.MetadataEntry.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.akkaserverless.component.MetadataEntry} returns this
 */
proto.akkaserverless.component.MetadataEntry.prototype.clearStringValue = function() {
  return jspb.Message.setOneofField(this, 2, proto.akkaserverless.component.MetadataEntry.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.MetadataEntry.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes bytes_value = 3;
 * @return {string}
 */
proto.akkaserverless.component.MetadataEntry.prototype.getBytesValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes bytes_value = 3;
 * This is a type-conversion wrapper around `getBytesValue()`
 * @return {string}
 */
proto.akkaserverless.component.MetadataEntry.prototype.getBytesValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesValue()));
};


/**
 * optional bytes bytes_value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesValue()`
 * @return {!Uint8Array}
 */
proto.akkaserverless.component.MetadataEntry.prototype.getBytesValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.akkaserverless.component.MetadataEntry} returns this
 */
proto.akkaserverless.component.MetadataEntry.prototype.setBytesValue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.akkaserverless.component.MetadataEntry.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.akkaserverless.component.MetadataEntry} returns this
 */
proto.akkaserverless.component.MetadataEntry.prototype.clearBytesValue = function() {
  return jspb.Message.setOneofField(this, 3, proto.akkaserverless.component.MetadataEntry.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.MetadataEntry.prototype.hasBytesValue = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.component.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.component.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.component.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    metadata: (f = msg.getMetadata()) && proto.akkaserverless.component.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.component.Reply}
 */
proto.akkaserverless.component.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.component.Reply;
  return proto.akkaserverless.component.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.component.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.component.Reply}
 */
proto.akkaserverless.component.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 2:
      var value = new proto.akkaserverless.component.Metadata;
      reader.readMessage(value,proto.akkaserverless.component.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.component.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.component.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.component.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.akkaserverless.component.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Any payload = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.akkaserverless.component.Reply.prototype.getPayload = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.akkaserverless.component.Reply} returns this
*/
proto.akkaserverless.component.Reply.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.Reply} returns this
 */
proto.akkaserverless.component.Reply.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.Reply.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Metadata metadata = 2;
 * @return {?proto.akkaserverless.component.Metadata}
 */
proto.akkaserverless.component.Reply.prototype.getMetadata = function() {
  return /** @type{?proto.akkaserverless.component.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.component.Metadata, 2));
};


/**
 * @param {?proto.akkaserverless.component.Metadata|undefined} value
 * @return {!proto.akkaserverless.component.Reply} returns this
*/
proto.akkaserverless.component.Reply.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.Reply} returns this
 */
proto.akkaserverless.component.Reply.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.Reply.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.component.Forward.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.component.Forward.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.component.Forward} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.Forward.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commandName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    payload: (f = msg.getPayload()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    metadata: (f = msg.getMetadata()) && proto.akkaserverless.component.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.component.Forward}
 */
proto.akkaserverless.component.Forward.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.component.Forward;
  return proto.akkaserverless.component.Forward.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.component.Forward} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.component.Forward}
 */
proto.akkaserverless.component.Forward.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommandName(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 4:
      var value = new proto.akkaserverless.component.Metadata;
      reader.readMessage(value,proto.akkaserverless.component.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.component.Forward.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.component.Forward.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.component.Forward} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.Forward.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommandName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.akkaserverless.component.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string service_name = 1;
 * @return {string}
 */
proto.akkaserverless.component.Forward.prototype.getServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.component.Forward} returns this
 */
proto.akkaserverless.component.Forward.prototype.setServiceName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string command_name = 2;
 * @return {string}
 */
proto.akkaserverless.component.Forward.prototype.getCommandName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.component.Forward} returns this
 */
proto.akkaserverless.component.Forward.prototype.setCommandName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Any payload = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.akkaserverless.component.Forward.prototype.getPayload = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.akkaserverless.component.Forward} returns this
*/
proto.akkaserverless.component.Forward.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.Forward} returns this
 */
proto.akkaserverless.component.Forward.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.Forward.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Metadata metadata = 4;
 * @return {?proto.akkaserverless.component.Metadata}
 */
proto.akkaserverless.component.Forward.prototype.getMetadata = function() {
  return /** @type{?proto.akkaserverless.component.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.component.Metadata, 4));
};


/**
 * @param {?proto.akkaserverless.component.Metadata|undefined} value
 * @return {!proto.akkaserverless.component.Forward} returns this
*/
proto.akkaserverless.component.Forward.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.Forward} returns this
 */
proto.akkaserverless.component.Forward.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.Forward.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.akkaserverless.component.ClientAction.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.akkaserverless.component.ClientAction.ActionCase = {
  ACTION_NOT_SET: 0,
  REPLY: 1,
  FORWARD: 2,
  FAILURE: 3
};

/**
 * @return {proto.akkaserverless.component.ClientAction.ActionCase}
 */
proto.akkaserverless.component.ClientAction.prototype.getActionCase = function() {
  return /** @type {proto.akkaserverless.component.ClientAction.ActionCase} */(jspb.Message.computeOneofCase(this, proto.akkaserverless.component.ClientAction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.component.ClientAction.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.component.ClientAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.component.ClientAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.ClientAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    reply: (f = msg.getReply()) && proto.akkaserverless.component.Reply.toObject(includeInstance, f),
    forward: (f = msg.getForward()) && proto.akkaserverless.component.Forward.toObject(includeInstance, f),
    failure: (f = msg.getFailure()) && proto.akkaserverless.component.Failure.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.component.ClientAction}
 */
proto.akkaserverless.component.ClientAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.component.ClientAction;
  return proto.akkaserverless.component.ClientAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.component.ClientAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.component.ClientAction}
 */
proto.akkaserverless.component.ClientAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.akkaserverless.component.Reply;
      reader.readMessage(value,proto.akkaserverless.component.Reply.deserializeBinaryFromReader);
      msg.setReply(value);
      break;
    case 2:
      var value = new proto.akkaserverless.component.Forward;
      reader.readMessage(value,proto.akkaserverless.component.Forward.deserializeBinaryFromReader);
      msg.setForward(value);
      break;
    case 3:
      var value = new proto.akkaserverless.component.Failure;
      reader.readMessage(value,proto.akkaserverless.component.Failure.deserializeBinaryFromReader);
      msg.setFailure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.component.ClientAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.component.ClientAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.component.ClientAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.ClientAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReply();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.akkaserverless.component.Reply.serializeBinaryToWriter
    );
  }
  f = message.getForward();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.akkaserverless.component.Forward.serializeBinaryToWriter
    );
  }
  f = message.getFailure();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.akkaserverless.component.Failure.serializeBinaryToWriter
    );
  }
};


/**
 * optional Reply reply = 1;
 * @return {?proto.akkaserverless.component.Reply}
 */
proto.akkaserverless.component.ClientAction.prototype.getReply = function() {
  return /** @type{?proto.akkaserverless.component.Reply} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.component.Reply, 1));
};


/**
 * @param {?proto.akkaserverless.component.Reply|undefined} value
 * @return {!proto.akkaserverless.component.ClientAction} returns this
*/
proto.akkaserverless.component.ClientAction.prototype.setReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.akkaserverless.component.ClientAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.ClientAction} returns this
 */
proto.akkaserverless.component.ClientAction.prototype.clearReply = function() {
  return this.setReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.ClientAction.prototype.hasReply = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Forward forward = 2;
 * @return {?proto.akkaserverless.component.Forward}
 */
proto.akkaserverless.component.ClientAction.prototype.getForward = function() {
  return /** @type{?proto.akkaserverless.component.Forward} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.component.Forward, 2));
};


/**
 * @param {?proto.akkaserverless.component.Forward|undefined} value
 * @return {!proto.akkaserverless.component.ClientAction} returns this
*/
proto.akkaserverless.component.ClientAction.prototype.setForward = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.akkaserverless.component.ClientAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.ClientAction} returns this
 */
proto.akkaserverless.component.ClientAction.prototype.clearForward = function() {
  return this.setForward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.ClientAction.prototype.hasForward = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Failure failure = 3;
 * @return {?proto.akkaserverless.component.Failure}
 */
proto.akkaserverless.component.ClientAction.prototype.getFailure = function() {
  return /** @type{?proto.akkaserverless.component.Failure} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.component.Failure, 3));
};


/**
 * @param {?proto.akkaserverless.component.Failure|undefined} value
 * @return {!proto.akkaserverless.component.ClientAction} returns this
*/
proto.akkaserverless.component.ClientAction.prototype.setFailure = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.akkaserverless.component.ClientAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.ClientAction} returns this
 */
proto.akkaserverless.component.ClientAction.prototype.clearFailure = function() {
  return this.setFailure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.ClientAction.prototype.hasFailure = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.component.SideEffect.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.component.SideEffect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.component.SideEffect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.SideEffect.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commandName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    payload: (f = msg.getPayload()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    synchronous: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    metadata: (f = msg.getMetadata()) && proto.akkaserverless.component.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.component.SideEffect}
 */
proto.akkaserverless.component.SideEffect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.component.SideEffect;
  return proto.akkaserverless.component.SideEffect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.component.SideEffect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.component.SideEffect}
 */
proto.akkaserverless.component.SideEffect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommandName(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSynchronous(value);
      break;
    case 5:
      var value = new proto.akkaserverless.component.Metadata;
      reader.readMessage(value,proto.akkaserverless.component.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.component.SideEffect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.component.SideEffect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.component.SideEffect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.SideEffect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommandName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getSynchronous();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.akkaserverless.component.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string service_name = 1;
 * @return {string}
 */
proto.akkaserverless.component.SideEffect.prototype.getServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.component.SideEffect} returns this
 */
proto.akkaserverless.component.SideEffect.prototype.setServiceName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string command_name = 2;
 * @return {string}
 */
proto.akkaserverless.component.SideEffect.prototype.getCommandName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.component.SideEffect} returns this
 */
proto.akkaserverless.component.SideEffect.prototype.setCommandName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Any payload = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.akkaserverless.component.SideEffect.prototype.getPayload = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.akkaserverless.component.SideEffect} returns this
*/
proto.akkaserverless.component.SideEffect.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.SideEffect} returns this
 */
proto.akkaserverless.component.SideEffect.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.SideEffect.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool synchronous = 4;
 * @return {boolean}
 */
proto.akkaserverless.component.SideEffect.prototype.getSynchronous = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.akkaserverless.component.SideEffect} returns this
 */
proto.akkaserverless.component.SideEffect.prototype.setSynchronous = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional Metadata metadata = 5;
 * @return {?proto.akkaserverless.component.Metadata}
 */
proto.akkaserverless.component.SideEffect.prototype.getMetadata = function() {
  return /** @type{?proto.akkaserverless.component.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.component.Metadata, 5));
};


/**
 * @param {?proto.akkaserverless.component.Metadata|undefined} value
 * @return {!proto.akkaserverless.component.SideEffect} returns this
*/
proto.akkaserverless.component.SideEffect.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.SideEffect} returns this
 */
proto.akkaserverless.component.SideEffect.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.SideEffect.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.component.StreamCancelled.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.component.StreamCancelled.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.component.StreamCancelled} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.StreamCancelled.toObject = function(includeInstance, msg) {
  var f, obj = {
    componentId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.component.StreamCancelled}
 */
proto.akkaserverless.component.StreamCancelled.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.component.StreamCancelled;
  return proto.akkaserverless.component.StreamCancelled.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.component.StreamCancelled} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.component.StreamCancelled}
 */
proto.akkaserverless.component.StreamCancelled.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setComponentId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.component.StreamCancelled.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.component.StreamCancelled.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.component.StreamCancelled} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.StreamCancelled.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComponentId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string component_id = 1;
 * @return {string}
 */
proto.akkaserverless.component.StreamCancelled.prototype.getComponentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.component.StreamCancelled} returns this
 */
proto.akkaserverless.component.StreamCancelled.prototype.setComponentId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 id = 2;
 * @return {number}
 */
proto.akkaserverless.component.StreamCancelled.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.akkaserverless.component.StreamCancelled} returns this
 */
proto.akkaserverless.component.StreamCancelled.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.component.Failure.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.component.Failure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.component.Failure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.Failure.toObject = function(includeInstance, msg) {
  var f, obj = {
    commandId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    restart: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.component.Failure}
 */
proto.akkaserverless.component.Failure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.component.Failure;
  return proto.akkaserverless.component.Failure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.component.Failure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.component.Failure}
 */
proto.akkaserverless.component.Failure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCommandId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRestart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.component.Failure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.component.Failure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.component.Failure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.Failure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommandId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRestart();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int64 command_id = 1;
 * @return {number}
 */
proto.akkaserverless.component.Failure.prototype.getCommandId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.akkaserverless.component.Failure} returns this
 */
proto.akkaserverless.component.Failure.prototype.setCommandId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.akkaserverless.component.Failure.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.component.Failure} returns this
 */
proto.akkaserverless.component.Failure.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool restart = 3;
 * @return {boolean}
 */
proto.akkaserverless.component.Failure.prototype.getRestart = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.akkaserverless.component.Failure} returns this
 */
proto.akkaserverless.component.Failure.prototype.setRestart = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


goog.object.extend(exports, proto.akkaserverless.component);
