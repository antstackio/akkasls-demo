export = AnySupport;
/**
 * This is any type that has been returned by the protobufjs Message.create method.
 *
 * It should have a encode() method on it.
 *
 * @typedef module:akkaserverless.SerializableProtobufMessage
 * @type {Object}
 */
/**
 * Any type that has a type property on it can be serialized as JSON, with the value of the type property describing
 * the type of the value.
 *
 * @typedef module:akkaserverless.TypedJson
 * @type {Object}
 * @property {string} type The type of the object.
 */
/**
 * A type that is serializable.
 *
 * @typedef module:akkaserverless.Serializable
 * @type {module:akkaserverless.SerializableProtobufMessage|module:akkaserverless.TypedJson|Object|string|number|boolean|Long|Buffer}
 */
/**
 * @private
 */
declare class AnySupport {
    static fullNameOf(descriptor: any): any;
    static stripHostName(url: any): any;
    static isPrimitiveDefaultValue(obj: any, type: any): boolean;
    static serializePrimitiveValue(obj: any, type: any): any[] | Uint8Array;
    static serializePrimitive(obj: any, type: any): import("../proto/protobuf-bundle").google.protobuf.Any;
    /**
     * Create a comparable version of obj for use in sets and maps.
     *
     * The returned value guarantees === equality (both positive and negative) for the following types:
     *
     * - strings
     * - numbers
     * - booleans
     * - Buffers
     * - Longs
     * - any protobufjs types
     * - objects (based on stable JSON serialization)
     * @private
     */
    private static toComparable;
    /**
     * Serialize a protobuf object to a google.protobuf.Any.
     *
     * @param obj The object to serialize. It must be a protobufjs created object.
     * @param allowPrimitives Whether primitives should be allowed to be serialized.
     * @param fallbackToJson Whether serialization should fallback to JSON if the object
     *        is not a protobuf, but defines a type property.
     * @param requireJsonType If fallbackToJson is true, then if this is true, a property
     *        called type is required.
     * @private
     */
    private static serialize;
    static primitiveDefaultValue(type: any): any;
    static deserializePrimitive(bytes: any, type: any): any;
    constructor(root: any);
    root: any;
    /**
     * Deserialize an any using the given protobufjs root object.
     *
     * @param any The any.
     * @private
     */
    private deserialize;
}
declare namespace AnySupport {
    export { module };
}
/**
 * :akkaserverless.SerializableProtobufMessage
 */
type module = {};
