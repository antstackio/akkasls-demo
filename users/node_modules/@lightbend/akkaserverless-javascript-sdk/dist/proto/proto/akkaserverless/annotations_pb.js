// source: akkaserverless/annotations.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var akkaserverless_component_pb = require('../akkaserverless/component_pb.js');
goog.object.extend(proto, akkaserverless_component_pb);
var akkaserverless_eventing_pb = require('../akkaserverless/eventing_pb.js');
goog.object.extend(proto, akkaserverless_eventing_pb);
var akkaserverless_views_pb = require('../akkaserverless/views_pb.js');
goog.object.extend(proto, akkaserverless_views_pb);
var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.object.extend(proto, google_protobuf_descriptor_pb);
goog.exportSymbol('proto.akkaserverless.FieldOptions', null, global);
goog.exportSymbol('proto.akkaserverless.FileOptions', null, global);
goog.exportSymbol('proto.akkaserverless.MethodOptions', null, global);
goog.exportSymbol('proto.akkaserverless.ServiceOptions', null, global);
goog.exportSymbol('proto.akkaserverless.ServiceOptions.ServiceType', null, global);
goog.exportSymbol('proto.akkaserverless.field', null, global);
goog.exportSymbol('proto.akkaserverless.file', null, global);
goog.exportSymbol('proto.akkaserverless.method', null, global);
goog.exportSymbol('proto.akkaserverless.service', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.FieldOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akkaserverless.FieldOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.FieldOptions.displayName = 'proto.akkaserverless.FieldOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.FileOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akkaserverless.FileOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.FileOptions.displayName = 'proto.akkaserverless.FileOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.MethodOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akkaserverless.MethodOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.MethodOptions.displayName = 'proto.akkaserverless.MethodOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.ServiceOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akkaserverless.ServiceOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.ServiceOptions.displayName = 'proto.akkaserverless.ServiceOptions';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.FieldOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.FieldOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.FieldOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.FieldOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    entityKey: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.FieldOptions}
 */
proto.akkaserverless.FieldOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.FieldOptions;
  return proto.akkaserverless.FieldOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.FieldOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.FieldOptions}
 */
proto.akkaserverless.FieldOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEntityKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.FieldOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.FieldOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.FieldOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.FieldOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntityKey();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool entity_key = 1;
 * @return {boolean}
 */
proto.akkaserverless.FieldOptions.prototype.getEntityKey = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.akkaserverless.FieldOptions} returns this
 */
proto.akkaserverless.FieldOptions.prototype.setEntityKey = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.FileOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.FileOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.FileOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.FileOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventSourcedEntity: (f = msg.getEventSourcedEntity()) && akkaserverless_component_pb.EventSourcedEntity.toObject(includeInstance, f),
    valueEntity: (f = msg.getValueEntity()) && akkaserverless_component_pb.ValueEntity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.FileOptions}
 */
proto.akkaserverless.FileOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.FileOptions;
  return proto.akkaserverless.FileOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.FileOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.FileOptions}
 */
proto.akkaserverless.FileOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new akkaserverless_component_pb.EventSourcedEntity;
      reader.readMessage(value,akkaserverless_component_pb.EventSourcedEntity.deserializeBinaryFromReader);
      msg.setEventSourcedEntity(value);
      break;
    case 2:
      var value = new akkaserverless_component_pb.ValueEntity;
      reader.readMessage(value,akkaserverless_component_pb.ValueEntity.deserializeBinaryFromReader);
      msg.setValueEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.FileOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.FileOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.FileOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.FileOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventSourcedEntity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      akkaserverless_component_pb.EventSourcedEntity.serializeBinaryToWriter
    );
  }
  f = message.getValueEntity();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      akkaserverless_component_pb.ValueEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional EventSourcedEntity event_sourced_entity = 1;
 * @return {?proto.akkaserverless.EventSourcedEntity}
 */
proto.akkaserverless.FileOptions.prototype.getEventSourcedEntity = function() {
  return /** @type{?proto.akkaserverless.EventSourcedEntity} */ (
    jspb.Message.getWrapperField(this, akkaserverless_component_pb.EventSourcedEntity, 1));
};


/**
 * @param {?proto.akkaserverless.EventSourcedEntity|undefined} value
 * @return {!proto.akkaserverless.FileOptions} returns this
*/
proto.akkaserverless.FileOptions.prototype.setEventSourcedEntity = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.FileOptions} returns this
 */
proto.akkaserverless.FileOptions.prototype.clearEventSourcedEntity = function() {
  return this.setEventSourcedEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.FileOptions.prototype.hasEventSourcedEntity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ValueEntity value_entity = 2;
 * @return {?proto.akkaserverless.ValueEntity}
 */
proto.akkaserverless.FileOptions.prototype.getValueEntity = function() {
  return /** @type{?proto.akkaserverless.ValueEntity} */ (
    jspb.Message.getWrapperField(this, akkaserverless_component_pb.ValueEntity, 2));
};


/**
 * @param {?proto.akkaserverless.ValueEntity|undefined} value
 * @return {!proto.akkaserverless.FileOptions} returns this
*/
proto.akkaserverless.FileOptions.prototype.setValueEntity = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.FileOptions} returns this
 */
proto.akkaserverless.FileOptions.prototype.clearValueEntity = function() {
  return this.setValueEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.FileOptions.prototype.hasValueEntity = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.MethodOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.MethodOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.MethodOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.MethodOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventing: (f = msg.getEventing()) && akkaserverless_eventing_pb.Eventing.toObject(includeInstance, f),
    view: (f = msg.getView()) && akkaserverless_views_pb.View.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.MethodOptions}
 */
proto.akkaserverless.MethodOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.MethodOptions;
  return proto.akkaserverless.MethodOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.MethodOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.MethodOptions}
 */
proto.akkaserverless.MethodOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new akkaserverless_eventing_pb.Eventing;
      reader.readMessage(value,akkaserverless_eventing_pb.Eventing.deserializeBinaryFromReader);
      msg.setEventing(value);
      break;
    case 2:
      var value = new akkaserverless_views_pb.View;
      reader.readMessage(value,akkaserverless_views_pb.View.deserializeBinaryFromReader);
      msg.setView(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.MethodOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.MethodOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.MethodOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.MethodOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventing();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      akkaserverless_eventing_pb.Eventing.serializeBinaryToWriter
    );
  }
  f = message.getView();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      akkaserverless_views_pb.View.serializeBinaryToWriter
    );
  }
};


/**
 * optional Eventing eventing = 1;
 * @return {?proto.akkaserverless.Eventing}
 */
proto.akkaserverless.MethodOptions.prototype.getEventing = function() {
  return /** @type{?proto.akkaserverless.Eventing} */ (
    jspb.Message.getWrapperField(this, akkaserverless_eventing_pb.Eventing, 1));
};


/**
 * @param {?proto.akkaserverless.Eventing|undefined} value
 * @return {!proto.akkaserverless.MethodOptions} returns this
*/
proto.akkaserverless.MethodOptions.prototype.setEventing = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.MethodOptions} returns this
 */
proto.akkaserverless.MethodOptions.prototype.clearEventing = function() {
  return this.setEventing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.MethodOptions.prototype.hasEventing = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional View view = 2;
 * @return {?proto.akkaserverless.View}
 */
proto.akkaserverless.MethodOptions.prototype.getView = function() {
  return /** @type{?proto.akkaserverless.View} */ (
    jspb.Message.getWrapperField(this, akkaserverless_views_pb.View, 2));
};


/**
 * @param {?proto.akkaserverless.View|undefined} value
 * @return {!proto.akkaserverless.MethodOptions} returns this
*/
proto.akkaserverless.MethodOptions.prototype.setView = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.MethodOptions} returns this
 */
proto.akkaserverless.MethodOptions.prototype.clearView = function() {
  return this.setView(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.MethodOptions.prototype.hasView = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.ServiceOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.ServiceOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.ServiceOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.ServiceOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    component: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.ServiceOptions}
 */
proto.akkaserverless.ServiceOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.ServiceOptions;
  return proto.akkaserverless.ServiceOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.ServiceOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.ServiceOptions}
 */
proto.akkaserverless.ServiceOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.akkaserverless.ServiceOptions.ServiceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComponent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.ServiceOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.ServiceOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.ServiceOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.ServiceOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getComponent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.akkaserverless.ServiceOptions.ServiceType = {
  SERVICE_TYPE_UNSPECIFIED: 0,
  SERVICE_TYPE_ACTION: 1,
  SERVICE_TYPE_ENTITY: 2,
  SERVICE_TYPE_VIEW: 3
};

/**
 * optional ServiceType type = 1;
 * @return {!proto.akkaserverless.ServiceOptions.ServiceType}
 */
proto.akkaserverless.ServiceOptions.prototype.getType = function() {
  return /** @type {!proto.akkaserverless.ServiceOptions.ServiceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.akkaserverless.ServiceOptions.ServiceType} value
 * @return {!proto.akkaserverless.ServiceOptions} returns this
 */
proto.akkaserverless.ServiceOptions.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string component = 2;
 * @return {string}
 */
proto.akkaserverless.ServiceOptions.prototype.getComponent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.ServiceOptions} returns this
 */
proto.akkaserverless.ServiceOptions.prototype.setComponent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `field`.
 * @type {!jspb.ExtensionFieldInfo<!proto.akkaserverless.FieldOptions>}
 */
proto.akkaserverless.field = new jspb.ExtensionFieldInfo(
    1080,
    {field: 0},
    proto.akkaserverless.FieldOptions,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.akkaserverless.FieldOptions.toObject),
    0);

google_protobuf_descriptor_pb.FieldOptions.extensionsBinary[1080] = new jspb.ExtensionFieldBinaryInfo(
    proto.akkaserverless.field,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.akkaserverless.FieldOptions.serializeBinaryToWriter,
    proto.akkaserverless.FieldOptions.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.FieldOptions.extensions[1080] = proto.akkaserverless.field;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `file`.
 * @type {!jspb.ExtensionFieldInfo<!proto.akkaserverless.FileOptions>}
 */
proto.akkaserverless.file = new jspb.ExtensionFieldInfo(
    1080,
    {file: 0},
    proto.akkaserverless.FileOptions,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.akkaserverless.FileOptions.toObject),
    0);

google_protobuf_descriptor_pb.FileOptions.extensionsBinary[1080] = new jspb.ExtensionFieldBinaryInfo(
    proto.akkaserverless.file,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.akkaserverless.FileOptions.serializeBinaryToWriter,
    proto.akkaserverless.FileOptions.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.FileOptions.extensions[1080] = proto.akkaserverless.file;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `method`.
 * @type {!jspb.ExtensionFieldInfo<!proto.akkaserverless.MethodOptions>}
 */
proto.akkaserverless.method = new jspb.ExtensionFieldInfo(
    1080,
    {method: 0},
    proto.akkaserverless.MethodOptions,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.akkaserverless.MethodOptions.toObject),
    0);

google_protobuf_descriptor_pb.MethodOptions.extensionsBinary[1080] = new jspb.ExtensionFieldBinaryInfo(
    proto.akkaserverless.method,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.akkaserverless.MethodOptions.serializeBinaryToWriter,
    proto.akkaserverless.MethodOptions.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.MethodOptions.extensions[1080] = proto.akkaserverless.method;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `service`.
 * @type {!jspb.ExtensionFieldInfo<!proto.akkaserverless.ServiceOptions>}
 */
proto.akkaserverless.service = new jspb.ExtensionFieldInfo(
    1080,
    {service: 0},
    proto.akkaserverless.ServiceOptions,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.akkaserverless.ServiceOptions.toObject),
    0);

google_protobuf_descriptor_pb.ServiceOptions.extensionsBinary[1080] = new jspb.ExtensionFieldBinaryInfo(
    proto.akkaserverless.service,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.akkaserverless.ServiceOptions.serializeBinaryToWriter,
    proto.akkaserverless.ServiceOptions.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.ServiceOptions.extensions[1080] = proto.akkaserverless.service;

goog.object.extend(exports, proto.akkaserverless);
