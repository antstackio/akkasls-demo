export = LWWRegister;
/**
 * @classdesc A Last-Write-Wins Register Replicated Data type.
 *
 * A last write wins register uses a clock to determine which of two concurrent updates should win. The clock is
 * represented as a number. The default clock uses the proxies system time, custom clocks can supply a custom number
 * to be used. If two clock values are equal, the write from the node with the lowest address wins.
 *
 * @constructor module:akkaserverless.replicatedentity.LWWRegister
 * @implements module:akkaserverless.replicatedentity.ReplicatedData
 * @param {module:akkaserverless.Serializable} value A value to hold in the register.
 * @param {module:akkaserverless.replicatedentity.Clock} [clock=Clocks.DEFAULT] The clock to use.
 * @param {number} [customClockValue=0] The custom clock value, if using a custom clock.
 */
declare function LWWRegister(value: any, clock?: any, customClockValue?: number | undefined): void;
declare class LWWRegister {
    /**
     * @classdesc A Last-Write-Wins Register Replicated Data type.
     *
     * A last write wins register uses a clock to determine which of two concurrent updates should win. The clock is
     * represented as a number. The default clock uses the proxies system time, custom clocks can supply a custom number
     * to be used. If two clock values are equal, the write from the node with the lowest address wins.
     *
     * @constructor module:akkaserverless.replicatedentity.LWWRegister
     * @implements module:akkaserverless.replicatedentity.ReplicatedData
     * @param {module:akkaserverless.Serializable} value A value to hold in the register.
     * @param {module:akkaserverless.replicatedentity.Clock} [clock=Clocks.DEFAULT] The clock to use.
     * @param {number} [customClockValue=0] The custom clock value, if using a custom clock.
     */
    constructor(value: any, clock?: any, customClockValue?: number | undefined);
    /**
     * Set the the value using a custom clock.
     *
     * @function module:akkaserverless.replicatedentity.LWWRegister#setWithClock
     * @param {module:akkaserverless.Serializable} value The value to set.
     * @param {module:akkaserverless.replicatedentity.Clock} [clock=Clocks.DEFAULT] The clock.
     * @param {number} [customClockValue=0] Ignored if a custom clock isn't specified.
     */
    setWithClock: (value: any, clock?: any, customClockValue?: number | undefined) => LWWRegister;
    resetDelta: () => void;
    getAndResetDelta: () => {
        lwwregister: {
            value: import("../../proto/protobuf-bundle").google.protobuf.Any;
            clock: any;
            customClockValue: number;
        };
    } | null;
    applyDelta: (delta: any, anySupport: any) => void;
    toString: () => string;
}
