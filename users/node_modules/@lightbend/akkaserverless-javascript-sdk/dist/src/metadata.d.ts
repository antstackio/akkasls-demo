export = Metadata;
/**
 * A metadata value. Can either be a string or a buffer.
 *
 * @typedef module:akkaserverless.MetadataValue
 * @type {string|Buffer}
 */
/**
 * @classdesc Akka Serverless metadata.
 *
 * Metadata is treated as case insensitive on lookup, and case sensitive on set. Multiple values per key are supported,
 * setting a value will add it to the current values for that key. You should delete first if you wish to replace a
 * value.
 *
 * Values can either be strings or byte buffers. If a non string or byte buffer value is set, it will be converted to
 * a string using toString.
 *
 * @interface module:akkaserverless.Metadata
 * @param {array} entries The list of entries
 */
declare function Metadata(entries: any): void;
declare class Metadata {
    /**
     * A metadata value. Can either be a string or a buffer.
     *
     * @typedef module:akkaserverless.MetadataValue
     * @type {string|Buffer}
     */
    /**
     * @classdesc Akka Serverless metadata.
     *
     * Metadata is treated as case insensitive on lookup, and case sensitive on set. Multiple values per key are supported,
     * setting a value will add it to the current values for that key. You should delete first if you wish to replace a
     * value.
     *
     * Values can either be strings or byte buffers. If a non string or byte buffer value is set, it will be converted to
     * a string using toString.
     *
     * @interface module:akkaserverless.Metadata
     * @param {array} entries The list of entries
     */
    constructor(entries: any);
    entries: any;
    /**
     * The metadata expressed as an object.
     *
     * The object keys are case insensitive, ie, `metadata.foo` and `metadata.Foo` both return the same value. If there
     * are multiple values for a given key, the first one set for that key will be returned. Setting a value will add it
     * to the list of existing values for that key.
     *
     * @name module:akkaserverless.Metadata#getMap
     * @type {Object<String, module:akkaserverless.MetadataValue>}
     */
    getMap: any;
    /**
     * Get all the values for the given key.
     *
     * The key is case insensitive.
     *
     * @function module:akkaserverless.Metadata#get
     * @param {string} key The key to get.
     * @returns {Array<module:akkaserverless.MetadataValue>} All the values, or an empty array if no values exist for the key.
     */
    get: (key: string) => Array<module>;
    /**
     * Set a given key value.
     *
     * This will append the key value to the metadata, it won't replace any existing values for existing keys.
     *
     * @function module:akkaserverless.Metadata#set
     * @param {string} key The key to set.
     * @param {module:akkaserverless.MetadataValue} value The value to set.
     */
    set: (key: string, value: any) => void;
    /**
     * Delete all values with the given key.
     *
     * The key is case insensitive.
     *
     * @function module:akkaserverless.Metadata#delete
     * @param {string} key The key to delete.
     */
    delete: (key: string) => void;
    /**
     * Whether there exists a metadata value for the given key.
     *
     * The key is case insensitive.
     *
     * @function module:akkaserverless.Metadata#has
     * @param {string} key The key to check.
     */
    has: (key: string) => true | undefined;
    /**
     * Clear the metadata.
     *
     * @function module:akkaserverless.Metadata#clear
     */
    clear: () => void;
    /**
     * The metadata, expressed as a CloudEvent.
     *
     * @name module:akkaserverless.Metadata#cloudevent
     * @type {module:akkaserverless.CloudEvent}
     */
    cloudevent: any;
}
declare namespace Metadata {
    export { module };
}
declare namespace module {
    namespace exports {
        export { module };
    }
}
/**
 * :akkaserverless.MetadataValue
 */
type module = string | Buffer;
