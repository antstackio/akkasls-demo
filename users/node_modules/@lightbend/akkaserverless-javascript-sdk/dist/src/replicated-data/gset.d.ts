export = GSet;
/**
 * @classdesc A Grow-only Set Replicated Data type.
 *
 * A grow only set can have elements added to it, but not removed.
 *
 * @constructor module:akkaserverless.replicatedentity.GSet
 * @implements module:akkaserverless.replicatedentity.ReplicatedData
 */
declare function GSet(): void;
declare class GSet {
    /**
     * Does this set contain the given element?
     *
     * @function module:akkaserverless.replicatedentity.GSet#has
     * @param {module:akkaserverless.Serializable} element The element to check.
     * @returns {boolean} True if the set contains the element.
     */
    has: (element: any) => boolean;
    /**
     * Execute the given callback for each element.
     *
     * @function module:akkaserverless.replicatedentity.GSet#forEach
     * @param {module:akkaserverless.replicatedentity.GSet~forEachCallback} callback - The callback to handle each element.
     */
    forEach: (callback: any) => void;
    /**
     * Add an element to this set.
     *
     * @function module:akkaserverless.replicatedentity.GSet#add
     * @param {module:akkaserverless.Serializable} element The element to add.
     * @return {module:akkaserverless.replicatedentity.GSet} This set.
     */
    add: (element: any) => any;
    getAndResetDelta: (initial: any) => {
        gset: {
            added: any[];
        };
    } | null;
    applyDelta: (delta: any, anySupport: any) => void;
    toString: () => string;
    /**
     * Create an iterator for this set.
     *
     * @function module:akkaserverless.replicatedentity.GSet#iterator
     * @returns {Iterator<module:akkaserverless.Serializable>}
     */
    [Symbol.iterator]: () => Iterator<{
        exports: typeof GSet;
    }>;
}
