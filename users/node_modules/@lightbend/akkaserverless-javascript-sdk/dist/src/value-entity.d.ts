export = ValueEntity;
/**
 * Value entity command handlers
 * The names of the properties must match the names of the service calls specified in the gRPC descriptor for this value entities service.
 *
 * @typedef module:akkaserverless.ValueEntity~commandHandlers
 * @type {Object<String, module:akkaserverless.ValueEntity~commandHandler>}
 */
/**
 * A command handler for one service call to the value entity
 *
 * @callback module:akkaserverless.ValueEntity~commandHandler
 * @param {Object} command The command message, this will be of the type of the gRPC service call input type.
 * @param {module:akkaserverless.Serializable} state The entity state.
 * @param {module:akkaserverless.ValueEntity.ValueEntityCommandContext} context The command context.
 * @returns {undefined|Object|module:akkaserverless.replies.Reply} The message to reply with, it must match the gRPC service call output type for this
 * command, or if a Reply is returned, contain an object that matches the output type.
 */
/**
 * Initial state callback.
 *
 * This is invoked if the entity is started with no snapshot.
 *
 * @callback module:akkaserverless.ValueEntity~initialCallback
 * @param {string} entityId The entity id.
 * @returns {module:akkaserverless.Serializable} The entity state.
 */
/**
 * Options for a value entity.
 *
 * @typedef module:akkaserverless.ValueEntity~options
 * @property {array<string>} [includeDirs=["."]] The directories to include when looking up imported protobuf files.
 * @property {boolean} [serializeAllowPrimitives=false] Whether serialization of primitives should be supported when
 * serializing the state.
 * @property {boolean} [serializeFallbackToJson=false] Whether serialization should fallback to using JSON if the state
 * can't be serialized as a protobuf.
 */
/**
 * A value entity.
 *
 * @memberOf module:akkaserverless
 * @implements module:akkaserverless.Entity
 */
declare class ValueEntity implements module {
    /**
     * Create a new value entity.
     *
     * @param {string|string[]} desc A descriptor or list of descriptors to parse, containing the service to serve.
     * @param {string} serviceName The fully qualified name of the service that provides this entities interface.
     * @param {string} entityType The entity type name for all value entities of this type. Never change it after deploying
     *                            a service that stored data of this type
     * @param {module:akkaserverless.ValueEntity~options=} options The options for this entity
     */
    constructor(desc: string | string[], serviceName: string, entityType: string, options: any);
    options: any;
    root: protobuf.Root;
    serviceName: string;
    service: protobuf.Service;
    grpc: grpc.GrpcObject;
    componentType(): string;
    /**
     * Lookup a protobuf message type.
     *
     * This is provided as a convenience to lookup protobuf message types for use with state.
     *
     * @param {string} messageType The fully qualified name of the type to lookup.
     */
    lookupType(messageType: string): protobuf.Type;
    /**
     * The initial state callback.
     *
     * @member module:akkaserverless.ValueEntity#initial
     * @type module:akkaserverless.ValueEntity~initialCallback
     */
    /**
     * Set the initial state callback.
     *
     * @param {module:akkaserverless.ValueEntity~initialCallback} callback The initial state callback.
     * @return {module:akkaserverless.ValueEntity} This entity.
     */
    setInitial(callback: any): any;
    initial: any;
    /**
     * Set the command handlers of the entity.
     *
     * @param {module:akkaserverless.ValueEntity~commandHandlers} handlers The command handler callbacks.
     * @return {module:akkaserverless.ValueEntity} This entity.
     */
    setCommandHandlers(commandHandlers: any): any;
    commandHandlers: any;
    register(allComponents: any): ValueEntityServices;
    start(options: any): number;
    server: AkkaServerless | undefined;
    shutdown(): void;
}
declare namespace ValueEntity {
    export { module };
}
declare namespace module {
    namespace exports {
        export { module };
    }
}
import grpc = require("@grpc/grpc-js");
import ValueEntityServices = require("./value-entity-support");
import AkkaServerless = require("./akkaserverless");
/**
 * :akkaserverless.ValueEntity~commandHandlers
 */
type module = any;
