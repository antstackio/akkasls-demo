"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StoppedNetwork = exports.StartedNetwork = exports.Network = void 0;
const docker_client_instance_1 = require("./docker-client-instance");
const uuid_1 = require("./uuid");
const logger_1 = require("./logger");
const reaper_1 = require("./reaper");
class Network {
    constructor(createNetworkOptions = {}, uuid = new uuid_1.RandomUuid()) {
        this.uuid = uuid;
        this.createNetworkOptions = Object.assign({ name: this.uuid.nextUuid(), driver: "bridge", checkDuplicate: true, internal: false, attachable: false, ingress: false, enableIPv6: false }, createNetworkOptions);
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            const dockerClient = yield docker_client_instance_1.DockerClientInstance.getInstance();
            yield reaper_1.ReaperInstance.getInstance(dockerClient);
            const id = yield dockerClient.createNetwork(this.createNetworkOptions);
            logger_1.log.info(`Started network with ID: ${id}`);
            return new StartedNetwork(id, this.createNetworkOptions, dockerClient);
        });
    }
}
exports.Network = Network;
class StartedNetwork {
    constructor(id, options, dockerClient) {
        this.id = id;
        this.options = options;
        this.dockerClient = dockerClient;
    }
    getId() {
        return this.id;
    }
    getName() {
        return this.options.name;
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.log.info(`Stopping network with ID: ${this.id}`);
            yield this.dockerClient.removeNetwork(this.id);
            return new StoppedNetwork();
        });
    }
}
exports.StartedNetwork = StartedNetwork;
class StoppedNetwork {
}
exports.StoppedNetwork = StoppedNetwork;
