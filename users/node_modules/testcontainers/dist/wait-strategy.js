"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthCheckWaitStrategy = exports.LogWaitStrategy = exports.HostPortWaitStrategy = void 0;
const byline_1 = __importDefault(require("byline"));
const logger_1 = require("./logger");
const retry_strategy_1 = require("./retry-strategy");
class AbstractWaitStrategy {
    constructor() {
        this.startupTimeout = 60000;
    }
    withStartupTimeout(startupTimeout) {
        this.startupTimeout = startupTimeout;
        return this;
    }
}
class HostPortWaitStrategy extends AbstractWaitStrategy {
    constructor(dockerClient, hostPortCheck, internalPortCheck) {
        super();
        this.dockerClient = dockerClient;
        this.hostPortCheck = hostPortCheck;
        this.internalPortCheck = internalPortCheck;
    }
    waitUntilReady(container, containerState, boundPorts) {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all([
                this.waitForHostPorts(container, containerState),
                this.waitForInternalPorts(container, boundPorts),
            ]);
        });
    }
    waitForHostPorts(container, containerState) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const hostPort of containerState.getHostPorts()) {
                logger_1.log.debug(`Waiting for host port ${hostPort} for ${container.getId()}`);
                yield this.waitForPort(container, hostPort, this.hostPortCheck);
                logger_1.log.debug(`Host port ${hostPort} ready for ${container.getId()}`);
            }
        });
    }
    waitForInternalPorts(container, boundPorts) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const [internalPort] of boundPorts.iterator()) {
                logger_1.log.debug(`Waiting for internal port ${internalPort} for ${container.getId()}`);
                yield this.waitForPort(container, internalPort, this.internalPortCheck);
                logger_1.log.debug(`Internal port ${internalPort} ready for ${container.getId()}`);
            }
        });
    }
    waitForPort(container, port, portCheck) {
        return __awaiter(this, void 0, void 0, function* () {
            const retryStrategy = new retry_strategy_1.IntervalRetryStrategy(100);
            yield retryStrategy.retryUntil(() => portCheck.isBound(port), (isBound) => isBound, () => {
                const timeout = this.startupTimeout;
                throw new Error(`Port ${port} not bound after ${timeout}ms for ${container.getId()}`);
            }, this.startupTimeout);
        });
    }
}
exports.HostPortWaitStrategy = HostPortWaitStrategy;
class LogWaitStrategy extends AbstractWaitStrategy {
    constructor(message) {
        super();
        this.message = message;
    }
    waitUntilReady(container) {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.log.debug(`Waiting for log message "${this.message}"`);
            const stream = yield container.logs();
            return new Promise((resolve, reject) => {
                const startupTimeout = this.startupTimeout;
                const timeout = setTimeout(() => {
                    const message = `Log message "${this.message}" not received after ${startupTimeout}ms for ${container.getId()}`;
                    logger_1.log.error(message);
                    reject(new Error(message));
                }, startupTimeout);
                const comparisonFn = (line) => {
                    if (this.message instanceof RegExp) {
                        return this.message.test(line);
                    }
                    else {
                        return line.includes(this.message);
                    }
                };
                byline_1.default(stream)
                    .on("data", (line) => {
                    if (comparisonFn(line)) {
                        stream.destroy();
                        clearTimeout(timeout);
                        resolve();
                    }
                })
                    .on("err", (line) => {
                    if (comparisonFn(line)) {
                        stream.destroy();
                        clearTimeout(timeout);
                        resolve();
                    }
                })
                    .on("end", () => {
                    stream.destroy();
                    clearTimeout(timeout);
                    reject(new Error(`Log stream ended and message "${this.message}" was not received for ${container.getId()}`));
                });
            });
        });
    }
}
exports.LogWaitStrategy = LogWaitStrategy;
class HealthCheckWaitStrategy extends AbstractWaitStrategy {
    waitUntilReady(container) {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.log.debug(`Waiting for health check`);
            const retryStrategy = new retry_strategy_1.IntervalRetryStrategy(100);
            const status = yield retryStrategy.retryUntil(() => __awaiter(this, void 0, void 0, function* () { return (yield container.inspect()).healthCheckStatus; }), (status) => status === "healthy" || status === "unhealthy", () => {
                const timeout = this.startupTimeout;
                throw new Error(`Health check not healthy after ${timeout}ms for ${container.getId()}`);
            }, this.startupTimeout);
            if (status !== "healthy") {
                throw new Error(`Health check failed: ${status} for ${container.getId()}`);
            }
        });
    }
}
exports.HealthCheckWaitStrategy = HealthCheckWaitStrategy;
