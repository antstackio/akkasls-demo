export = View;
/**
 * Options for a view.
 *
 * @typedef module:akkaserverless.View~options
 * @property {string} [viewId=serviceName] The id for the view, used for persisting the view.
 * @property {array<string>} [includeDirs=["."]] The directories to include when looking up imported protobuf files.
 */
/**
 * View handlers
 * The names of the properties must match the names of all the view methods specified in the gRPC
 * descriptor.
 *
 * @typedef module:akkaserverless.View~handlers
 * @type {Object<String, module:akkaserverless.View~handler>}
 */
/**
 * A handler for transforming an incoming event and the previous view state into a new state
 *
 * @callback module:akkaserverless.View~handler
 * @param {Object} event The event, this will be of the type of the gRPC event handler input type.
 * @param {undefined|module:akkaserverless.Serializable} state The previous view state or 'undefined' if no previous state was stored.
 * @param {module:akkaserverless.View.UpdateHandlerContext} context The view handler context.
 * @returns {undefined|module:akkaserverless.Serializable} The state to store in the view or undefined to not update/store state for the event
 */
/**
 * A view.
 *
 * @memberOf module:akkaserverless
 * @implements module:akkaserverless.Entity
 */
declare class View implements module {
    /**
     * Create a new view.
     *
     * @param {string|string[]} desc A descriptor or list of descriptors to parse, containing the service to serve.
     * @param {string} serviceName The fully qualified name of the service that provides this interface.
     * @param {module:akkaserverless.View~options=} options The options for this view
     */
    constructor(desc: string | string[], serviceName: string, options: any);
    options: any;
    root: protobuf.Root;
    serviceName: string;
    service: protobuf.Service;
    grpc: grpc.GrpcObject;
    componentType(): string;
    /**
     * Lookup a protobuf message type.
     *
     * This is provided as a convenience to lookup protobuf message types.
     *
     * @param {string} messageType The fully qualified name of the type to lookup.
     */
    lookupType(messageType: string): protobuf.Type;
    /**
     * Set the update handlers of the view. Only used for updates where event transformation is enabled through
     * "transform_updates: true" in the grpc descriptor.
     *
     * @param {module:akkaserverless.View~handlers} handlers The handler callbacks.
     * @return {module:akkaserverless.View} This view.
     */
    setUpdateHandlers(handlers: any): any;
    updateHandlers: any;
    register(allComponents: any): ViewServices;
    start(options: any): number;
    server: AkkaServerless | undefined;
    shutdown(): void;
}
declare namespace View {
    export { module };
}
declare namespace module {
    namespace exports {
        export { module };
    }
}
import grpc = require("@grpc/grpc-js");
import ViewServices = require("./view-support");
import AkkaServerless = require("./akkaserverless");
/**
 * :akkaserverless.View~options
 */
type module = {
    /**
     * The id for the view, used for persisting the view.
     */
    viewId?: string | undefined;
    /**
     * The directories to include when looking up imported protobuf files.
     */
    includeDirs?: any;
};
