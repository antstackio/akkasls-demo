"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Auths = void 0;
class Auths {
    getName() {
        return "Auths";
    }
    isApplicable(registry, dockerConfig) {
        return dockerConfig.auths !== undefined && dockerConfig.auths[registry] !== undefined;
    }
    getAuthConfig(registry, dockerConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            const authConfig = { registryAddress: registry };
            // @ts-ignore
            const auth = dockerConfig.auths[registry];
            if (auth.email) {
                authConfig.email = auth.email;
            }
            if (auth.auth) {
                const decodedAuth = Buffer.from(auth.auth, "base64").toString();
                const [username, password] = decodedAuth.split(":");
                authConfig.username = username;
                authConfig.password = password;
            }
            else {
                if (auth.username) {
                    authConfig.username = auth.username;
                }
                if (auth.password) {
                    authConfig.password = auth.password;
                }
            }
            return authConfig;
        });
    }
}
exports.Auths = Auths;
