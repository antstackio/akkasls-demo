export = PNCounter;
/**
 * @classdesc A Positive-Negative Counter Replicated Data type.
 *
 * A counter that can be incremented and decremented.
 *
 * The value is stored as a 64-bit signed long, hence values over `2^63 - 1` and less than `2^63` can't be represented.
 *
 * @constructor module:akkaserverless.replicatedentity.PNCounter
 * @implements module:akkaserverless.replicatedentity.ReplicatedData
 */
declare function PNCounter(): void;
declare class PNCounter {
    /**
     * Increment the counter by the given number.
     *
     * @function module:akkaserverless.replicatedentity.PNCounter#increment
     * @param {Long|number} increment The amount to increment the counter by. If negative, it will be decremented instead.
     * @returns {module:akkaserverless.replicatedentity.PNCounter} This counter.
     */
    increment: (increment: Long | number) => any;
    /**
     * Decrement the counter by the given number.
     *
     * @function module:akkaserverless.replicatedentity.PNCounter#decrement
     * @param {Long|number} decrement The amount to decrement the counter by. If negative, it will be incremented instead.
     * @returns {module:akkaserverless.replicatedentity.PNCounter} This counter.
     */
    decrement: (decrement: Long | number) => any;
    getAndResetDelta: (initial: any) => {
        pncounter: {
            change: Long.Long;
        };
    } | null;
    applyDelta: (delta: any) => void;
    toString: () => string;
}
import Long = require("long");
