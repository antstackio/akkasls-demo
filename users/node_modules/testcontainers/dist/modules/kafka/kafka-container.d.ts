import { GenericContainer } from "testcontainers/dist/generic-container";
import { BoundPorts } from "testcontainers/dist/bound-ports";
import { DockerClient } from "testcontainers/dist/docker-client";
import { StartedNetwork } from "testcontainers/dist/network";
import { Host } from "testcontainers/dist/docker-client-instance";
import { Port } from "testcontainers/dist/port";
import { StartedTestContainer, StoppedTestContainer } from "testcontainers";
import { StopOptions } from "testcontainers/dist/test-container";
import { AbstractStartedContainer } from "testcontainers/dist/modules/abstract-started-container";
export declare class KafkaContainer extends GenericContainer {
    private readonly host?;
    private readonly zooKeeperImage;
    private readonly uuid;
    private readonly portClient;
    private isZooKeeperProvided;
    private zooKeeperHost?;
    private zooKeeperPort?;
    private network?;
    private zooKeeperContainer?;
    constructor(image?: string, host?: string | undefined, zooKeeperImage?: string);
    withZooKeeper(host: Host, port: Port): this;
    protected preCreate(dockerClient: DockerClient, boundPorts: BoundPorts): Promise<void>;
    start(): Promise<StartedKafkaContainer>;
}
export declare class StartedKafkaContainer extends AbstractStartedContainer {
    private readonly network?;
    private readonly zooKeeperContainer?;
    constructor(startedTestContainer: StartedTestContainer, network?: StartedNetwork | undefined, zooKeeperContainer?: StartedTestContainer | undefined);
    stop(options?: Partial<StopOptions>): Promise<StoppedTestContainer>;
}
