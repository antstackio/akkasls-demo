"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartedElasticsearchContainer = exports.ElasticsearchContainer = void 0;
const __1 = require("../..");
const abstract_started_container_1 = require("../abstract-started-container");
const ELASTIC_SEARCH_HTTP_PORT = 9200;
const ELASTIC_SEARCH_IMAGE_NAME = "docker.elastic.co/elasticsearch/elasticsearch";
const ELASTIC_SEARCH_IMAGE_TAG = "7.9.2";
class ElasticsearchContainer extends __1.GenericContainer {
    constructor(image = `${ELASTIC_SEARCH_IMAGE_NAME}:${ELASTIC_SEARCH_IMAGE_TAG}`, timeout = 120000) {
        super(image);
        this.httpPort = ELASTIC_SEARCH_HTTP_PORT;
        this.withExposedPorts(this.httpPort).withEnv("discovery.type", "single-node").withStartupTimeout(timeout);
    }
    start() {
        const _super = Object.create(null, {
            start: { get: () => super.start }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return new StartedElasticsearchContainer(yield _super.start.call(this), this.httpPort);
        });
    }
}
exports.ElasticsearchContainer = ElasticsearchContainer;
class StartedElasticsearchContainer extends abstract_started_container_1.AbstractStartedContainer {
    constructor(startedTestContainer, httpPort) {
        super(startedTestContainer);
        this.startedTestContainer = startedTestContainer;
        this.httpPort = httpPort;
    }
    getHttpUrl() {
        return `http://${this.getHost()}:${this.getMappedPort(this.httpPort)}`;
    }
}
exports.StartedElasticsearchContainer = StartedElasticsearchContainer;
