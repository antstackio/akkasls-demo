export = CommandHelper;
/**
 * Creates the base for context objects.
 * @private
 */
declare class CommandHelper {
    constructor(entityId: any, service: any, streamId: any, call: any, handlerFactory: any, allComponents: any, debug: any);
    entityId: any;
    service: any;
    streamId: any;
    call: any;
    effectSerializer: EffectSerializer;
    debug: any;
    handlerFactory: any;
    /**
     * Handle a command.
     *
     * @param command The command to handle.
     * @private
     */
    private handleCommand;
    handleCommandLogic(command: any): Promise<any>;
    invoke(handler: any, ctx: any): Promise<any>;
    errorReply(msg: any, ctx: any, desc: any): {
        reply: {
            commandId: any;
            clientAction: {
                failure: {
                    commandId: any;
                    description: any;
                };
            };
        };
    };
    invokeHandlerLogic(handler: any, ctx: any, grpcMethod: any, desc: any): Promise<any>;
    commandDebug(msg: any, ...args: any[]): void;
    createContext(commandId: any, metadata: any): {
        commandDebug(msg: any, ...args: any[]): void;
        commandId: any;
        effects: any[];
        active: boolean;
        ensureActive(): void;
        error: any;
        forward: any;
        replyMetadata: Metadata;
        /**
         * Context for an entity.
         *
         * @interface module:akkaserverless.EntityContext
         * @property {string} entityId The id of the entity that the command is for.
         * @property {Long} commandId The id of the command.
         * @property {module:akkaserverless.Metadata} replyMetadata The metadata to send with a reply.
         */
        /**
         * Effect context.
         *
         * @interface module:akkaserverless.EffectContext
         * @property {module:akkaserverless.Metadata} metadata The metadata associated with the command.
         * @property {module:akkaserverless.CloudEvent} cloudevent The CloudEvents metadata associated with the command.
         */
        /**
         * Context for a command.
         *
         * @interface module:akkaserverless.CommandContext
         * @extends module:akkaserverless.EffectContext
         */
        context: {
            entityId: any;
            commandId: any;
            metadata: any;
            cloudevent: {
                readonly specversion: any;
                id: any;
                source: any;
                type: any;
                datacontenttype: any;
                dataschema: any;
                subject: any;
                time: any;
            };
            replyMetadata: Metadata;
            /**
             * DEPRECATED. Emit an effect after processing this command.
             *
             * @function module:akkaserverless.EffectContext#effect
             * @param method The entity service method to invoke.
             * @param {object} message The message to send to that service.
             * @param {boolean} synchronous Whether the effect should be execute synchronously or not.
             * @param {module:akkaserverless.Metadata} metadata Metadata to send with the effect.
             */
            effect: (method: any, message: object, synchronous: boolean | undefined, metadata: any, internalCall: any) => void;
            /**
             * DEPRECATED. Forward this command to another service component call.
             *
             * @deprecated Since version 0.7. Will be deleted in version 0.8. Use 'forward' instead.
             *
             * @function module:akkaserverless.CommandContext#thenForward
             * @param method The service component method to invoke.
             * @param {object} message The message to send to that service component.
             * @param {module:akkaserverless.Metadata} metadata Metadata to send with the forward.
             */
            thenForward: (method: any, message: object, metadata: any) => void;
            /**
             * DEPRECATED. Forward this command to another service component call, use 'ReplyFactory.forward' instead.
             *
             * @function module:akkaserverless.CommandContext#forward
             * @param method The service component method to invoke.
             * @param {object} message The message to send to that service component.
             * @param {module:akkaserverless.Metadata} metadata Metadata to send with the forward.
             */
            forward: (method: any, message: object, metadata: any, internalCall: any) => void;
            /**
             * Fail handling this command.
             *
             * An alternative to using this is to return a failed Reply created with 'ReplyFactory.failed'.
             *
             * @function module:akkaserverless.EffectContext#fail
             * @param msg The failure message.
             * @throws An error that captures the failure message. Note that even if you catch the error thrown by this
             * method, the command will still be failed with the given message.
             */
            fail: (msg: any) => never;
        };
    };
}
import EffectSerializer = require("./effect-serializer");
import Metadata = require("./metadata");
