// source: akkaserverless/views.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.object.extend(proto, google_protobuf_descriptor_pb);
goog.exportSymbol('proto.akkaserverless.View', null, global);
goog.exportSymbol('proto.akkaserverless.View.Query', null, global);
goog.exportSymbol('proto.akkaserverless.View.Update', null, global);
goog.exportSymbol('proto.akkaserverless.View.UpdateOrQueryCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.View = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.akkaserverless.View.oneofGroups_);
};
goog.inherits(proto.akkaserverless.View, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.View.displayName = 'proto.akkaserverless.View';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.View.Update = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akkaserverless.View.Update, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.View.Update.displayName = 'proto.akkaserverless.View.Update';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.View.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akkaserverless.View.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.View.Query.displayName = 'proto.akkaserverless.View.Query';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.akkaserverless.View.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.akkaserverless.View.UpdateOrQueryCase = {
  UPDATE_OR_QUERY_NOT_SET: 0,
  UPDATE: 1,
  QUERY: 2
};

/**
 * @return {proto.akkaserverless.View.UpdateOrQueryCase}
 */
proto.akkaserverless.View.prototype.getUpdateOrQueryCase = function() {
  return /** @type {proto.akkaserverless.View.UpdateOrQueryCase} */(jspb.Message.computeOneofCase(this, proto.akkaserverless.View.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.View.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.View.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.View} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.View.toObject = function(includeInstance, msg) {
  var f, obj = {
    update: (f = msg.getUpdate()) && proto.akkaserverless.View.Update.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && proto.akkaserverless.View.Query.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.View}
 */
proto.akkaserverless.View.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.View;
  return proto.akkaserverless.View.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.View} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.View}
 */
proto.akkaserverless.View.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.akkaserverless.View.Update;
      reader.readMessage(value,proto.akkaserverless.View.Update.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    case 2:
      var value = new proto.akkaserverless.View.Query;
      reader.readMessage(value,proto.akkaserverless.View.Query.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.View.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.View.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.View} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.View.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.akkaserverless.View.Update.serializeBinaryToWriter
    );
  }
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.akkaserverless.View.Query.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.View.Update.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.View.Update.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.View.Update} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.View.Update.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transformUpdates: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.View.Update}
 */
proto.akkaserverless.View.Update.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.View.Update;
  return proto.akkaserverless.View.Update.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.View.Update} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.View.Update}
 */
proto.akkaserverless.View.Update.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTable(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTransformUpdates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.View.Update.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.View.Update.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.View.Update} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.View.Update.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransformUpdates();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string table = 1;
 * @return {string}
 */
proto.akkaserverless.View.Update.prototype.getTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.View.Update} returns this
 */
proto.akkaserverless.View.Update.prototype.setTable = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool transform_updates = 2;
 * @return {boolean}
 */
proto.akkaserverless.View.Update.prototype.getTransformUpdates = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.akkaserverless.View.Update} returns this
 */
proto.akkaserverless.View.Update.prototype.setTransformUpdates = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.View.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.View.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.View.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.View.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 3, ""),
    transformResults: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.View.Query}
 */
proto.akkaserverless.View.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.View.Query;
  return proto.akkaserverless.View.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.View.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.View.Query}
 */
proto.akkaserverless.View.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTransformResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.View.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.View.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.View.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.View.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTransformResults();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string query = 3;
 * @return {string}
 */
proto.akkaserverless.View.Query.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.View.Query} returns this
 */
proto.akkaserverless.View.Query.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool transform_results = 4;
 * @return {boolean}
 */
proto.akkaserverless.View.Query.prototype.getTransformResults = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.akkaserverless.View.Query} returns this
 */
proto.akkaserverless.View.Query.prototype.setTransformResults = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional Update update = 1;
 * @return {?proto.akkaserverless.View.Update}
 */
proto.akkaserverless.View.prototype.getUpdate = function() {
  return /** @type{?proto.akkaserverless.View.Update} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.View.Update, 1));
};


/**
 * @param {?proto.akkaserverless.View.Update|undefined} value
 * @return {!proto.akkaserverless.View} returns this
*/
proto.akkaserverless.View.prototype.setUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.akkaserverless.View.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.View} returns this
 */
proto.akkaserverless.View.prototype.clearUpdate = function() {
  return this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.View.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Query query = 2;
 * @return {?proto.akkaserverless.View.Query}
 */
proto.akkaserverless.View.prototype.getQuery = function() {
  return /** @type{?proto.akkaserverless.View.Query} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.View.Query, 2));
};


/**
 * @param {?proto.akkaserverless.View.Query|undefined} value
 * @return {!proto.akkaserverless.View} returns this
*/
proto.akkaserverless.View.prototype.setQuery = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.akkaserverless.View.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.View} returns this
 */
proto.akkaserverless.View.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.View.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.akkaserverless);
