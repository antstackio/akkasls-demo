/// <reference types="node" />
import dockerode from "dockerode";
import { Command, ContainerName, ExitCode } from "./docker-client";
import { Port } from "./port";
import { Readable } from "stream";
export declare type Id = string;
export declare type HealthCheckStatus = "none" | "starting" | "unhealthy" | "healthy";
export declare type NetworkSettings = {
    networkId: string;
    ipAddress: string;
};
export declare type InspectResult = {
    name: ContainerName;
    internalPorts: Port[];
    hostPorts: Port[];
    healthCheckStatus: HealthCheckStatus;
    networkSettings: {
        [networkName: string]: NetworkSettings;
    };
};
declare type ExecInspectResult = {
    exitCode: ExitCode;
    running: boolean;
    entrypoint: string;
    arguments: string[];
};
interface Exec {
    start(): Promise<NodeJS.ReadableStream>;
    inspect(): Promise<ExecInspectResult>;
}
declare type ExecOptions = {
    cmd: Command[];
    attachStdout: true;
    attachStderr: true;
};
declare type StopOptions = {
    timeout: number;
};
declare type RemoveOptions = {
    removeVolumes: boolean;
};
export interface Container {
    getId(): Id;
    start(): Promise<void>;
    stop(options: StopOptions): Promise<void>;
    remove(options: RemoveOptions): Promise<void>;
    exec(options: ExecOptions): Promise<Exec>;
    logs(): Promise<Readable>;
    inspect(): Promise<InspectResult>;
    putArchive(stream: Readable, containerPath: string): Promise<void>;
}
export declare class DockerodeContainer implements Container {
    private readonly container;
    constructor(container: dockerode.Container);
    getId(): Id;
    start(): Promise<void>;
    stop(options: StopOptions): Promise<void>;
    remove(options: RemoveOptions): Promise<void>;
    exec(options: ExecOptions): Promise<Exec>;
    logs(): Promise<Readable>;
    inspect(): Promise<InspectResult>;
    putArchive(stream: Readable, containerPath: string): Promise<void>;
    private getName;
    private getInternalPorts;
    private getHostPorts;
    private getHealthCheckStatus;
    private getNetworkSettings;
}
export {};
