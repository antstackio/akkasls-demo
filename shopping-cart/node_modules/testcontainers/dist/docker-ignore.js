"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findDockerIgnoreFiles = void 0;
const fs_1 = require("fs");
const os_1 = __importDefault(require("os"));
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
const findDockerIgnoreFiles = (context) => __awaiter(void 0, void 0, void 0, function* () {
    const dockerIgnoreFiles = new Set();
    const dockerIgnoreFilePath = path_1.default.join(context, ".dockerignore");
    if (!fs_1.existsSync(dockerIgnoreFilePath)) {
        return dockerIgnoreFiles;
    }
    const dockerIgnorePatterns = (yield fs_1.promises.readFile(dockerIgnoreFilePath, { encoding: "utf-8" }))
        .toString()
        .split(os_1.default.EOL)
        .map((dockerIgnorePattern) => path_1.default.resolve(context, dockerIgnorePattern));
    const dockerIgnoreMatches = yield Promise.all(dockerIgnorePatterns.map((dockerIgnorePattern) => {
        return new Promise((resolve, reject) => glob_1.default(dockerIgnorePattern, (err, matches) => {
            if (err) {
                return reject(err);
            }
            else {
                resolve(matches);
            }
        }));
    }));
    dockerIgnoreMatches.forEach((dockerIgnoreFileBatch) => {
        dockerIgnoreFileBatch.forEach((dockerIgnoreFile) => dockerIgnoreFiles.add(dockerIgnoreFile));
    });
    return dockerIgnoreFiles;
});
exports.findDockerIgnoreFiles = findDockerIgnoreFiles;
