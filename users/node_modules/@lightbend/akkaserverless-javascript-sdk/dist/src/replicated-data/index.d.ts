/**
 * :akkaserverless.replicatedentity.Clock
 */
export type module = any;
export function createForDelta(delta: any): GCounter | PNCounter | GSet | ORSet | LWWRegister | Flag | ORMap | Vote;
import GCounter = require("./gcounter");
import PNCounter = require("./pncounter");
import GSet = require("./gset");
import ORSet = require("./orset");
import LWWRegister = require("./lwwregister");
import Flag = require("./flag");
import ORMap = require("./ormap");
import Vote = require("./vote");
/**
 * *
 */
export type Clocks = any;
/**
 * All Replicated Data types and Replicated Data type support classes.
 *
 * @namespace module:akkaserverless.replicatedentity
 */
/**
 * A Replicated Data type.
 *
 * @interface module:akkaserverless.replicatedentity.ReplicatedData
 */
/**
 * A clock that may be used by {@link module:akkaserverless.replicatedentity.LWWRegister}.
 *
 * @typedef module:akkaserverless.replicatedentity.Clock
 */
/**
 * An enum of all clocks that can be used by {@link module:akkaserverless.replicatedentity.LWWRegister}.
 *
 * @name module:akkaserverless.replicatedentity.Clocks
 * @enum {module:akkaserverless.replicatedentity.Clock}
 * @property DEFAULT The default clock, uses the machines system time.
 * @property REVERSE A reverse clock, for achieving first-write-wins semantics.
 * @property CUSTOM A custom clock.
 * @property CUSTOM_AUTO_INCREMENT A custom clock that automatically increments if the current clock value
 * is less than the existing clock value.
 */
export const Clocks: Readonly<{
    DEFAULT: import("../../proto/protobuf-bundle").akkaserverless.component.replicatedentity.ReplicatedEntityClock;
    REVERSE: import("../../proto/protobuf-bundle").akkaserverless.component.replicatedentity.ReplicatedEntityClock;
    CUSTOM: import("../../proto/protobuf-bundle").akkaserverless.component.replicatedentity.ReplicatedEntityClock;
    CUSTOM_AUTO_INCREMENT: import("../../proto/protobuf-bundle").akkaserverless.component.replicatedentity.ReplicatedEntityClock;
}>;
/**
 * *
 */
export type WriteConsistencies = any;
/**
 * A write consistency setting for replication of state updates.
 *
 * @typedef module:akkaserverless.replicatedentity.WriteConsistency
 */
/**
 * An enum of write consistency settings, for replication of state updates.
 *
 * @name module:akkaserverless.replicatedentity.WriteConsistencies
 * @enum {module:akkaserverless.replicatedentity.WriteConsistency}
 * @property LOCAL Updates will only be written to the local replica immediately, and then asynchronously
 *                 distributed to other replicas in the background.
 * @property MAJORITY Updates will be written immediately to a majority of replicas, and then asynchronously
 *                    distributed to remaining replicas in the background.
 * @property ALL Updates will be written immediately to all replicas.
 */
export const WriteConsistencies: Readonly<{
    LOCAL: import("../../proto/protobuf-bundle").akkaserverless.component.replicatedentity.ReplicatedEntityWriteConsistency;
    MAJORITY: import("../../proto/protobuf-bundle").akkaserverless.component.replicatedentity.ReplicatedEntityWriteConsistency;
    ALL: import("../../proto/protobuf-bundle").akkaserverless.component.replicatedentity.ReplicatedEntityWriteConsistency;
}>;
export { GCounter, PNCounter, GSet, ORSet, LWWRegister, Flag, ORMap, Vote };
