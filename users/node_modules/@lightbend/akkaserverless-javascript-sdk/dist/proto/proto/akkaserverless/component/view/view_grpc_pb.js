// GENERATED CODE -- DO NOT EDIT!

// Original file comments:
// Copyright 2021 Lightbend Inc.
//
// gRPC interface for Akka Serverless Views.
//
'use strict';
var grpc = require('@grpc/grpc-js');
var akkaserverless_component_view_view_pb = require('../../../akkaserverless/component/view/view_pb.js');
var akkaserverless_component_component_pb = require('../../../akkaserverless/component/component_pb.js');
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');

function serialize_akkaserverless_component_view_ViewStreamIn(arg) {
  if (!(arg instanceof akkaserverless_component_view_view_pb.ViewStreamIn)) {
    throw new Error('Expected argument of type akkaserverless.component.view.ViewStreamIn');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_akkaserverless_component_view_ViewStreamIn(buffer_arg) {
  return akkaserverless_component_view_view_pb.ViewStreamIn.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_akkaserverless_component_view_ViewStreamOut(arg) {
  if (!(arg instanceof akkaserverless_component_view_view_pb.ViewStreamOut)) {
    throw new Error('Expected argument of type akkaserverless.component.view.ViewStreamOut');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_akkaserverless_component_view_ViewStreamOut(buffer_arg) {
  return akkaserverless_component_view_view_pb.ViewStreamOut.deserializeBinary(new Uint8Array(buffer_arg));
}


// Service that the SDK (in the user function) implements to make
// views available to the proxy.
//
// TODO: It is currently only implemented to support one request (ReceiveEvent)
// with one response (Upsert). The intention, and reason for full-duplex
// streaming, is that there should be able to have an interaction with two main
// types of operations, loads, and updates, and with each load there is an
// associated continuation, which in turn may return more operations, including
// more loads, and so on recursively.
var ViewsService = exports.ViewsService = {
  handle: {
    path: '/akkaserverless.component.view.Views/Handle',
    requestStream: true,
    responseStream: true,
    requestType: akkaserverless_component_view_view_pb.ViewStreamIn,
    responseType: akkaserverless_component_view_view_pb.ViewStreamOut,
    requestSerialize: serialize_akkaserverless_component_view_ViewStreamIn,
    requestDeserialize: deserialize_akkaserverless_component_view_ViewStreamIn,
    responseSerialize: serialize_akkaserverless_component_view_ViewStreamOut,
    responseDeserialize: deserialize_akkaserverless_component_view_ViewStreamOut,
  },
};

exports.ViewsClient = grpc.makeGenericClientConstructor(ViewsService);
