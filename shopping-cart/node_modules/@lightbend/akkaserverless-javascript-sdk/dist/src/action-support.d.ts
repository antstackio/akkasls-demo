export = ActionServices;
declare class ActionServices {
    services: {};
    addService(component: any, allComponents: any): void;
    componentType(): string;
    register(server: any): void;
    createHandler(call: any, callback: any, data: any): ActionHandler | undefined;
    reportError(error: any, call: any, callback: any): void;
    handleStreamed(call: any): void;
    handleStreamedOut(call: any): void;
    handleStreamedIn(call: any, callback: any): void;
    handleUnary(call: any, callback: any): void;
}
/**
 * @private
 */
declare class ActionHandler {
    constructor(support: any, grpcMethod: any, commandHandler: any, call: any, grpcCallback: any, metadata: any);
    support: any;
    grpcMethod: any;
    commandHandler: any;
    call: any;
    grpcCallback: any;
    streamId: string;
    supportedEvents: any[];
    callbacks: {};
    ctx: {
        readonly cancelled: any;
        readonly metadata: Metadata;
        readonly cloudevent: {
            readonly specversion: any;
            id: any;
            source: any;
            type: any;
            datacontenttype: any;
            dataschema: any;
            subject: any;
            time: any;
        };
        readonly eventSubject: any;
    };
    streamDebug(msg: any, ...args: any[]): void;
    /**
     * Context for an action command.
     *
     * @interface module:akkaserverless.Action.ActionCommandContext
     * @extends module:akkaserverless.CommandContext
     * @property {boolean} cancelled Whether the client is still connected.
     * @property {module:akkaserverless.Metadata} metadata The metadata associated with the command.
     * @property {module:akkaserverless.CloudEvent} cloudevent The CloudEvents metadata associated with the command.
     * @property {String} eventSubject The origin subject of the CloudEvent. For example, the entity key when the event was emitted from an entity.
     */
    createContext(metadata: any): {
        readonly cancelled: any;
        readonly metadata: Metadata;
        readonly cloudevent: {
            readonly specversion: any;
            id: any;
            source: any;
            type: any;
            datacontenttype: any;
            dataschema: any;
            subject: any;
            time: any;
        };
        readonly eventSubject: any;
    };
    /**
     * @return {*} The return value from the callback, if there was one
     */
    invokeCallback(eventType: any, ...args: any[]): any;
    ensureNotCancelled(): void;
    /**
     * @param {module:akkaserverless.Action.ActionCommandContext} ctx
     * @param {module:akkaserverless.replies.Reply} reply
     */
    passReplyThroughContext(ctx: any, reply: any): void;
    handleSingleReturn(value: any): void;
    /**
     * Context for a unary action command.
     *
     * @interface module:akkaserverless.Action.UnaryCommandContext
     * @extends module:akkaserverless.Action.ActionCommandContext
     */
    handleUnary(): void;
    /**
     * Context for a streamed in action command.
     *
     * @interface module:akkaserverless.Action.StreamedInCommandContext
     * @extends module:akkaserverless.Action.StreamedInContext
     * @extends module:akkaserverless.Action.ActionCommandContext
     */
    handleStreamedIn(): void;
    /**
     * Context for a streamed out action command.
     *
     * @interface module:akkaserverless.Action.StreamedOutCommandContext
     * @extends module:akkaserverless.Action.StreamedOutContext
     */
    handleStreamedOut(): void;
    /**
     * Context for a streamed action command.
     *
     * @interface module:akkaserverless.Action.StreamedCommandContext
     * @extends module:akkaserverless.Action.StreamedInContext
     * @extends module:akkaserverless.Action.StreamedOutContext
     */
    handleStreamed(): void;
    setupUnaryOutContext(): void;
    /**
     * Context for an action command that returns a streamed message out.
     *
     * @interface module:akkaserverless.Action.StreamedOutContext
     * @extends module:akkaserverless.Action.ActionCommandContext
     */
    setupStreamedOutContext(): void;
    /**
     * Context for an action command that handles streamed messages in.
     *
     * @interface module:akkaserverless.Action.StreamedInContext
     * @extends module:akkaserverless.Action.ActionCommandContext
     */
    setupStreamedInContext(): void;
    invokeUserCallback(callbackName: any, callback: any, ...args: any[]): any;
}
import Metadata = require("./metadata");
