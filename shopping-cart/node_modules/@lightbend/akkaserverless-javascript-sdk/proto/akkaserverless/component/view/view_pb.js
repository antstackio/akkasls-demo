// source: akkaserverless/component/view/view.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var akkaserverless_component_component_pb = require('../../../akkaserverless/component/component_pb.js');
goog.object.extend(proto, akkaserverless_component_component_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.akkaserverless.component.view.Key', null, global);
goog.exportSymbol('proto.akkaserverless.component.view.KeyPart', null, global);
goog.exportSymbol('proto.akkaserverless.component.view.KeyPart.PartCase', null, global);
goog.exportSymbol('proto.akkaserverless.component.view.ReceiveEvent', null, global);
goog.exportSymbol('proto.akkaserverless.component.view.Row', null, global);
goog.exportSymbol('proto.akkaserverless.component.view.Upsert', null, global);
goog.exportSymbol('proto.akkaserverless.component.view.ViewStreamIn', null, global);
goog.exportSymbol('proto.akkaserverless.component.view.ViewStreamIn.MessageCase', null, global);
goog.exportSymbol('proto.akkaserverless.component.view.ViewStreamOut', null, global);
goog.exportSymbol('proto.akkaserverless.component.view.ViewStreamOut.MessageCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.component.view.ViewStreamIn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.akkaserverless.component.view.ViewStreamIn.oneofGroups_);
};
goog.inherits(proto.akkaserverless.component.view.ViewStreamIn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.component.view.ViewStreamIn.displayName = 'proto.akkaserverless.component.view.ViewStreamIn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.component.view.ReceiveEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akkaserverless.component.view.ReceiveEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.component.view.ReceiveEvent.displayName = 'proto.akkaserverless.component.view.ReceiveEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.component.view.ViewStreamOut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.akkaserverless.component.view.ViewStreamOut.oneofGroups_);
};
goog.inherits(proto.akkaserverless.component.view.ViewStreamOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.component.view.ViewStreamOut.displayName = 'proto.akkaserverless.component.view.ViewStreamOut';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.component.view.Upsert = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akkaserverless.component.view.Upsert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.component.view.Upsert.displayName = 'proto.akkaserverless.component.view.Upsert';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.component.view.Key = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.akkaserverless.component.view.Key.repeatedFields_, null);
};
goog.inherits(proto.akkaserverless.component.view.Key, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.component.view.Key.displayName = 'proto.akkaserverless.component.view.Key';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.component.view.KeyPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.akkaserverless.component.view.KeyPart.oneofGroups_);
};
goog.inherits(proto.akkaserverless.component.view.KeyPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.component.view.KeyPart.displayName = 'proto.akkaserverless.component.view.KeyPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akkaserverless.component.view.Row = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akkaserverless.component.view.Row, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akkaserverless.component.view.Row.displayName = 'proto.akkaserverless.component.view.Row';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.akkaserverless.component.view.ViewStreamIn.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.akkaserverless.component.view.ViewStreamIn.MessageCase = {
  MESSAGE_NOT_SET: 0,
  RECEIVE: 1
};

/**
 * @return {proto.akkaserverless.component.view.ViewStreamIn.MessageCase}
 */
proto.akkaserverless.component.view.ViewStreamIn.prototype.getMessageCase = function() {
  return /** @type {proto.akkaserverless.component.view.ViewStreamIn.MessageCase} */(jspb.Message.computeOneofCase(this, proto.akkaserverless.component.view.ViewStreamIn.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.component.view.ViewStreamIn.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.component.view.ViewStreamIn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.component.view.ViewStreamIn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.view.ViewStreamIn.toObject = function(includeInstance, msg) {
  var f, obj = {
    receive: (f = msg.getReceive()) && proto.akkaserverless.component.view.ReceiveEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.component.view.ViewStreamIn}
 */
proto.akkaserverless.component.view.ViewStreamIn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.component.view.ViewStreamIn;
  return proto.akkaserverless.component.view.ViewStreamIn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.component.view.ViewStreamIn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.component.view.ViewStreamIn}
 */
proto.akkaserverless.component.view.ViewStreamIn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.akkaserverless.component.view.ReceiveEvent;
      reader.readMessage(value,proto.akkaserverless.component.view.ReceiveEvent.deserializeBinaryFromReader);
      msg.setReceive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.component.view.ViewStreamIn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.component.view.ViewStreamIn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.component.view.ViewStreamIn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.view.ViewStreamIn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceive();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.akkaserverless.component.view.ReceiveEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReceiveEvent receive = 1;
 * @return {?proto.akkaserverless.component.view.ReceiveEvent}
 */
proto.akkaserverless.component.view.ViewStreamIn.prototype.getReceive = function() {
  return /** @type{?proto.akkaserverless.component.view.ReceiveEvent} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.component.view.ReceiveEvent, 1));
};


/**
 * @param {?proto.akkaserverless.component.view.ReceiveEvent|undefined} value
 * @return {!proto.akkaserverless.component.view.ViewStreamIn} returns this
*/
proto.akkaserverless.component.view.ViewStreamIn.prototype.setReceive = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.akkaserverless.component.view.ViewStreamIn.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.view.ViewStreamIn} returns this
 */
proto.akkaserverless.component.view.ViewStreamIn.prototype.clearReceive = function() {
  return this.setReceive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.view.ViewStreamIn.prototype.hasReceive = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.component.view.ReceiveEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.component.view.ReceiveEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.view.ReceiveEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commandName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    payload: (f = msg.getPayload()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    metadata: (f = msg.getMetadata()) && akkaserverless_component_component_pb.Metadata.toObject(includeInstance, f),
    initialTable: jspb.Message.getFieldWithDefault(msg, 5, ""),
    key: (f = msg.getKey()) && proto.akkaserverless.component.view.Key.toObject(includeInstance, f),
    bySubjectLookupResult: (f = msg.getBySubjectLookupResult()) && proto.akkaserverless.component.view.Row.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.component.view.ReceiveEvent}
 */
proto.akkaserverless.component.view.ReceiveEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.component.view.ReceiveEvent;
  return proto.akkaserverless.component.view.ReceiveEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.component.view.ReceiveEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.component.view.ReceiveEvent}
 */
proto.akkaserverless.component.view.ReceiveEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommandName(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 4:
      var value = new akkaserverless_component_component_pb.Metadata;
      reader.readMessage(value,akkaserverless_component_component_pb.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitialTable(value);
      break;
    case 6:
      var value = new proto.akkaserverless.component.view.Key;
      reader.readMessage(value,proto.akkaserverless.component.view.Key.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 7:
      var value = new proto.akkaserverless.component.view.Row;
      reader.readMessage(value,proto.akkaserverless.component.view.Row.deserializeBinaryFromReader);
      msg.setBySubjectLookupResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.component.view.ReceiveEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.component.view.ReceiveEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.view.ReceiveEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommandName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      akkaserverless_component_component_pb.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getInitialTable();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.akkaserverless.component.view.Key.serializeBinaryToWriter
    );
  }
  f = message.getBySubjectLookupResult();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.akkaserverless.component.view.Row.serializeBinaryToWriter
    );
  }
};


/**
 * optional string service_name = 1;
 * @return {string}
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.getServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.component.view.ReceiveEvent} returns this
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.setServiceName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string command_name = 2;
 * @return {string}
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.getCommandName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.component.view.ReceiveEvent} returns this
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.setCommandName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Any payload = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.getPayload = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.akkaserverless.component.view.ReceiveEvent} returns this
*/
proto.akkaserverless.component.view.ReceiveEvent.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.view.ReceiveEvent} returns this
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional akkaserverless.component.Metadata metadata = 4;
 * @return {?proto.akkaserverless.component.Metadata}
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.getMetadata = function() {
  return /** @type{?proto.akkaserverless.component.Metadata} */ (
    jspb.Message.getWrapperField(this, akkaserverless_component_component_pb.Metadata, 4));
};


/**
 * @param {?proto.akkaserverless.component.Metadata|undefined} value
 * @return {!proto.akkaserverless.component.view.ReceiveEvent} returns this
*/
proto.akkaserverless.component.view.ReceiveEvent.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.view.ReceiveEvent} returns this
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string initial_table = 5;
 * @return {string}
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.getInitialTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.component.view.ReceiveEvent} returns this
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.setInitialTable = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Key key = 6;
 * @return {?proto.akkaserverless.component.view.Key}
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.getKey = function() {
  return /** @type{?proto.akkaserverless.component.view.Key} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.component.view.Key, 6));
};


/**
 * @param {?proto.akkaserverless.component.view.Key|undefined} value
 * @return {!proto.akkaserverless.component.view.ReceiveEvent} returns this
*/
proto.akkaserverless.component.view.ReceiveEvent.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.view.ReceiveEvent} returns this
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.hasKey = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Row by_subject_lookup_result = 7;
 * @return {?proto.akkaserverless.component.view.Row}
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.getBySubjectLookupResult = function() {
  return /** @type{?proto.akkaserverless.component.view.Row} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.component.view.Row, 7));
};


/**
 * @param {?proto.akkaserverless.component.view.Row|undefined} value
 * @return {!proto.akkaserverless.component.view.ReceiveEvent} returns this
*/
proto.akkaserverless.component.view.ReceiveEvent.prototype.setBySubjectLookupResult = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.view.ReceiveEvent} returns this
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.clearBySubjectLookupResult = function() {
  return this.setBySubjectLookupResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.view.ReceiveEvent.prototype.hasBySubjectLookupResult = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.akkaserverless.component.view.ViewStreamOut.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.akkaserverless.component.view.ViewStreamOut.MessageCase = {
  MESSAGE_NOT_SET: 0,
  UPSERT: 1
};

/**
 * @return {proto.akkaserverless.component.view.ViewStreamOut.MessageCase}
 */
proto.akkaserverless.component.view.ViewStreamOut.prototype.getMessageCase = function() {
  return /** @type {proto.akkaserverless.component.view.ViewStreamOut.MessageCase} */(jspb.Message.computeOneofCase(this, proto.akkaserverless.component.view.ViewStreamOut.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.component.view.ViewStreamOut.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.component.view.ViewStreamOut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.component.view.ViewStreamOut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.view.ViewStreamOut.toObject = function(includeInstance, msg) {
  var f, obj = {
    upsert: (f = msg.getUpsert()) && proto.akkaserverless.component.view.Upsert.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.component.view.ViewStreamOut}
 */
proto.akkaserverless.component.view.ViewStreamOut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.component.view.ViewStreamOut;
  return proto.akkaserverless.component.view.ViewStreamOut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.component.view.ViewStreamOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.component.view.ViewStreamOut}
 */
proto.akkaserverless.component.view.ViewStreamOut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.akkaserverless.component.view.Upsert;
      reader.readMessage(value,proto.akkaserverless.component.view.Upsert.deserializeBinaryFromReader);
      msg.setUpsert(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.component.view.ViewStreamOut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.component.view.ViewStreamOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.component.view.ViewStreamOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.view.ViewStreamOut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpsert();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.akkaserverless.component.view.Upsert.serializeBinaryToWriter
    );
  }
};


/**
 * optional Upsert upsert = 1;
 * @return {?proto.akkaserverless.component.view.Upsert}
 */
proto.akkaserverless.component.view.ViewStreamOut.prototype.getUpsert = function() {
  return /** @type{?proto.akkaserverless.component.view.Upsert} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.component.view.Upsert, 1));
};


/**
 * @param {?proto.akkaserverless.component.view.Upsert|undefined} value
 * @return {!proto.akkaserverless.component.view.ViewStreamOut} returns this
*/
proto.akkaserverless.component.view.ViewStreamOut.prototype.setUpsert = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.akkaserverless.component.view.ViewStreamOut.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.view.ViewStreamOut} returns this
 */
proto.akkaserverless.component.view.ViewStreamOut.prototype.clearUpsert = function() {
  return this.setUpsert(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.view.ViewStreamOut.prototype.hasUpsert = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.component.view.Upsert.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.component.view.Upsert.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.component.view.Upsert} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.view.Upsert.toObject = function(includeInstance, msg) {
  var f, obj = {
    row: (f = msg.getRow()) && proto.akkaserverless.component.view.Row.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.component.view.Upsert}
 */
proto.akkaserverless.component.view.Upsert.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.component.view.Upsert;
  return proto.akkaserverless.component.view.Upsert.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.component.view.Upsert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.component.view.Upsert}
 */
proto.akkaserverless.component.view.Upsert.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.akkaserverless.component.view.Row;
      reader.readMessage(value,proto.akkaserverless.component.view.Row.deserializeBinaryFromReader);
      msg.setRow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.component.view.Upsert.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.component.view.Upsert.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.component.view.Upsert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.view.Upsert.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRow();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.akkaserverless.component.view.Row.serializeBinaryToWriter
    );
  }
};


/**
 * optional Row row = 1;
 * @return {?proto.akkaserverless.component.view.Row}
 */
proto.akkaserverless.component.view.Upsert.prototype.getRow = function() {
  return /** @type{?proto.akkaserverless.component.view.Row} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.component.view.Row, 1));
};


/**
 * @param {?proto.akkaserverless.component.view.Row|undefined} value
 * @return {!proto.akkaserverless.component.view.Upsert} returns this
*/
proto.akkaserverless.component.view.Upsert.prototype.setRow = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.view.Upsert} returns this
 */
proto.akkaserverless.component.view.Upsert.prototype.clearRow = function() {
  return this.setRow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.view.Upsert.prototype.hasRow = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.akkaserverless.component.view.Key.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.component.view.Key.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.component.view.Key.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.component.view.Key} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.view.Key.toObject = function(includeInstance, msg) {
  var f, obj = {
    partsList: jspb.Message.toObjectList(msg.getPartsList(),
    proto.akkaserverless.component.view.KeyPart.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.component.view.Key}
 */
proto.akkaserverless.component.view.Key.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.component.view.Key;
  return proto.akkaserverless.component.view.Key.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.component.view.Key} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.component.view.Key}
 */
proto.akkaserverless.component.view.Key.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.akkaserverless.component.view.KeyPart;
      reader.readMessage(value,proto.akkaserverless.component.view.KeyPart.deserializeBinaryFromReader);
      msg.addParts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.component.view.Key.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.component.view.Key.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.component.view.Key} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.view.Key.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.akkaserverless.component.view.KeyPart.serializeBinaryToWriter
    );
  }
};


/**
 * repeated KeyPart parts = 1;
 * @return {!Array<!proto.akkaserverless.component.view.KeyPart>}
 */
proto.akkaserverless.component.view.Key.prototype.getPartsList = function() {
  return /** @type{!Array<!proto.akkaserverless.component.view.KeyPart>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.akkaserverless.component.view.KeyPart, 1));
};


/**
 * @param {!Array<!proto.akkaserverless.component.view.KeyPart>} value
 * @return {!proto.akkaserverless.component.view.Key} returns this
*/
proto.akkaserverless.component.view.Key.prototype.setPartsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.akkaserverless.component.view.KeyPart=} opt_value
 * @param {number=} opt_index
 * @return {!proto.akkaserverless.component.view.KeyPart}
 */
proto.akkaserverless.component.view.Key.prototype.addParts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.akkaserverless.component.view.KeyPart, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.akkaserverless.component.view.Key} returns this
 */
proto.akkaserverless.component.view.Key.prototype.clearPartsList = function() {
  return this.setPartsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.akkaserverless.component.view.KeyPart.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.akkaserverless.component.view.KeyPart.PartCase = {
  PART_NOT_SET: 0,
  STRING_PART: 1,
  BYTES_PART: 2,
  INTEGER_PART: 3,
  FLOAT_PART: 4
};

/**
 * @return {proto.akkaserverless.component.view.KeyPart.PartCase}
 */
proto.akkaserverless.component.view.KeyPart.prototype.getPartCase = function() {
  return /** @type {proto.akkaserverless.component.view.KeyPart.PartCase} */(jspb.Message.computeOneofCase(this, proto.akkaserverless.component.view.KeyPart.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.component.view.KeyPart.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.component.view.KeyPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.component.view.KeyPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.view.KeyPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringPart: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bytesPart: msg.getBytesPart_asB64(),
    integerPart: jspb.Message.getFieldWithDefault(msg, 3, 0),
    floatPart: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.component.view.KeyPart}
 */
proto.akkaserverless.component.view.KeyPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.component.view.KeyPart;
  return proto.akkaserverless.component.view.KeyPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.component.view.KeyPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.component.view.KeyPart}
 */
proto.akkaserverless.component.view.KeyPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringPart(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesPart(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntegerPart(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFloatPart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.component.view.KeyPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.component.view.KeyPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.component.view.KeyPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.view.KeyPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional string string_part = 1;
 * @return {string}
 */
proto.akkaserverless.component.view.KeyPart.prototype.getStringPart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.component.view.KeyPart} returns this
 */
proto.akkaserverless.component.view.KeyPart.prototype.setStringPart = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.akkaserverless.component.view.KeyPart.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.akkaserverless.component.view.KeyPart} returns this
 */
proto.akkaserverless.component.view.KeyPart.prototype.clearStringPart = function() {
  return jspb.Message.setOneofField(this, 1, proto.akkaserverless.component.view.KeyPart.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.view.KeyPart.prototype.hasStringPart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes bytes_part = 2;
 * @return {string}
 */
proto.akkaserverless.component.view.KeyPart.prototype.getBytesPart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes bytes_part = 2;
 * This is a type-conversion wrapper around `getBytesPart()`
 * @return {string}
 */
proto.akkaserverless.component.view.KeyPart.prototype.getBytesPart_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesPart()));
};


/**
 * optional bytes bytes_part = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesPart()`
 * @return {!Uint8Array}
 */
proto.akkaserverless.component.view.KeyPart.prototype.getBytesPart_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesPart()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.akkaserverless.component.view.KeyPart} returns this
 */
proto.akkaserverless.component.view.KeyPart.prototype.setBytesPart = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.akkaserverless.component.view.KeyPart.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.akkaserverless.component.view.KeyPart} returns this
 */
proto.akkaserverless.component.view.KeyPart.prototype.clearBytesPart = function() {
  return jspb.Message.setOneofField(this, 2, proto.akkaserverless.component.view.KeyPart.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.view.KeyPart.prototype.hasBytesPart = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 integer_part = 3;
 * @return {number}
 */
proto.akkaserverless.component.view.KeyPart.prototype.getIntegerPart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.akkaserverless.component.view.KeyPart} returns this
 */
proto.akkaserverless.component.view.KeyPart.prototype.setIntegerPart = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.akkaserverless.component.view.KeyPart.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.akkaserverless.component.view.KeyPart} returns this
 */
proto.akkaserverless.component.view.KeyPart.prototype.clearIntegerPart = function() {
  return jspb.Message.setOneofField(this, 3, proto.akkaserverless.component.view.KeyPart.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.view.KeyPart.prototype.hasIntegerPart = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double float_part = 4;
 * @return {number}
 */
proto.akkaserverless.component.view.KeyPart.prototype.getFloatPart = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.akkaserverless.component.view.KeyPart} returns this
 */
proto.akkaserverless.component.view.KeyPart.prototype.setFloatPart = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.akkaserverless.component.view.KeyPart.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.akkaserverless.component.view.KeyPart} returns this
 */
proto.akkaserverless.component.view.KeyPart.prototype.clearFloatPart = function() {
  return jspb.Message.setOneofField(this, 4, proto.akkaserverless.component.view.KeyPart.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.view.KeyPart.prototype.hasFloatPart = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akkaserverless.component.view.Row.prototype.toObject = function(opt_includeInstance) {
  return proto.akkaserverless.component.view.Row.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akkaserverless.component.view.Row} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.view.Row.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, ""),
    key: (f = msg.getKey()) && proto.akkaserverless.component.view.Key.toObject(includeInstance, f),
    value: (f = msg.getValue()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akkaserverless.component.view.Row}
 */
proto.akkaserverless.component.view.Row.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akkaserverless.component.view.Row;
  return proto.akkaserverless.component.view.Row.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akkaserverless.component.view.Row} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akkaserverless.component.view.Row}
 */
proto.akkaserverless.component.view.Row.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.akkaserverless.component.view.Key;
      reader.readMessage(value,proto.akkaserverless.component.view.Key.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akkaserverless.component.view.Row.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akkaserverless.component.view.Row.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akkaserverless.component.view.Row} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akkaserverless.component.view.Row.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.akkaserverless.component.view.Key.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string index = 1;
 * @return {string}
 */
proto.akkaserverless.component.view.Row.prototype.getIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.akkaserverless.component.view.Row} returns this
 */
proto.akkaserverless.component.view.Row.prototype.setIndex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Key key = 2;
 * @return {?proto.akkaserverless.component.view.Key}
 */
proto.akkaserverless.component.view.Row.prototype.getKey = function() {
  return /** @type{?proto.akkaserverless.component.view.Key} */ (
    jspb.Message.getWrapperField(this, proto.akkaserverless.component.view.Key, 2));
};


/**
 * @param {?proto.akkaserverless.component.view.Key|undefined} value
 * @return {!proto.akkaserverless.component.view.Row} returns this
*/
proto.akkaserverless.component.view.Row.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.view.Row} returns this
 */
proto.akkaserverless.component.view.Row.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.view.Row.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Any value = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.akkaserverless.component.view.Row.prototype.getValue = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.akkaserverless.component.view.Row} returns this
*/
proto.akkaserverless.component.view.Row.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akkaserverless.component.view.Row} returns this
 */
proto.akkaserverless.component.view.Row.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akkaserverless.component.view.Row.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.akkaserverless.component.view);
