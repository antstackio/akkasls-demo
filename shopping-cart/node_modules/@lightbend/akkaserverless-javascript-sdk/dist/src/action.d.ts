export = Action;
/**
 * Options for a action.
 *
 * @typedef module:akkaserverless.Action~options
 * @property {array<string>} [includeDirs=["."]] The directories to include when looking up imported protobuf files.
 */
/**
 * A unary action command handler.
 *
 * @callback module:akkaserverless.Action~unaryCommandHandler
 * @param {Object} command The command message, this will be of the type of the gRPC service call input type.
 * @param {module:akkaserverless.Action.UnaryCommandContext} context The command context.
 * @returns {undefined|Object|Promise|module:akkaserverless.replies.Reply} The message to reply with, it must match the gRPC service call output type for
 *                                     this command. If replying by using context.write, undefined must be returned.
 */
/**
 * A streamed in action command handler.
 *
 * @callback module:akkaserverless.Action~streamedInCommandHandler
 * @param {module:akkaserverless.Action.StreamedInCommandContext} context The command context.
 * @returns {undefined|Object|Promise} The message to reply with, it must match the gRPC service call output type for
 *                                     this command. If replying by using context.write, undefined must be returned.
 */
/**
 * A streamed out command handler.
 *
 * @callback module:akkaserverless.Action~streamedOutCommandHandler
 * @param {Object} command The command message, this will be of the type of the gRPC service call input type.
 * @param {module:akkaserverless.Action.StreamedOutCommandContext} context The command context.
 */
/**
 * A streamed command handler.
 *
 * @callback module:akkaserverless.Action~streamedCommandHandler
 * @param {module:akkaserverless.Action.StreamedCommandContext} context The command context.
 */
/**
 * An action command handler.
 *
 * @typedef module:akkaserverless.Action.ActionCommandHandler
 * @type {module:akkaserverless.Action~unaryCommandHandler|module:akkaserverless.Action~streamedInCommandHandler|module:akkaserverless.Action~streamedOutCommandHandler|module:akkaserverless.Action~streamedCommandHandler}
 */
/**
 * An action.
 *
 * @memberOf module:akkaserverless
 * @implements module:akkaserverless.Entity
 */
declare class Action implements module {
    /**
     * Create a new action.
     *
     * @param {string|string[]} desc A descriptor or list of descriptors to parse, containing the service to serve.
     * @param {string} serviceName The fully qualified name of the service that provides this interface.
     * @param {module:akkaserverless.Action~options=} options The options for this action
     */
    constructor(desc: string | string[], serviceName: string, options: any);
    options: any;
    root: protobuf.Root;
    serviceName: string;
    service: protobuf.Service;
    grpc: grpc.GrpcObject;
    /**
     * The command handlers.
     *
     * The names of the properties must match the names of the service calls specified in the gRPC descriptor
     *
     * @type {Object.<string, module:akkaserverless.Action.ActionCommandHandler>}
     */
    commandHandlers: {
        [x: string]: module;
    };
    componentType(): string;
    /**
     * Lookup a protobuf message type.
     *
     * This is provided as a convenience to lookup protobuf message types for use with events and snapshots.
     *
     * @param {string} messageType The fully qualified name of the type to lookup.
     */
    lookupType(messageType: string): protobuf.Type;
    register(allComponents: any): ActionSupport;
    start(options: any): number;
    server: AkkaServerless | undefined;
    shutdown(): void;
}
declare namespace Action {
    export { module };
}
declare namespace module {
    namespace exports {
        export { module };
    }
}
import grpc = require("@grpc/grpc-js");
import ActionSupport = require("./action-support");
import AkkaServerless = require("./akkaserverless");
/**
 * :akkaserverless.Action~options
 */
type module = {
    /**
     * The directories to include when looking up imported protobuf files.
     */
    includeDirs?: any;
};
